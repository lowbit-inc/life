#!/usr/bin/env bash

#########
# Color #
#########

if [ ! "${COLOR}" == "false" ]; then

  colorReset="\e[0m"
  colorBold="\e[1m"
  colorDim="\e[2m"
  colorUnderline="\e[4m"
  colorBlink="\e[5m"
  colorRed="\e[31m"
  colorGreen="\e[32m"
  colorYellow="\e[33m"
  colorBlue="\e[34m"
  colorMagenta="\e[35m"
  colorCyan="\e[36m"
  colorLightGray="\e[37m"
  colorDarkGray="\e[90m"
  colorLightRed="\e[91m"
  colorLightGreen="\e[92m"
  colorLightYellow="\e[93m"
  colorLightBlue="\e[94m"
  colorLightMagenta="\e[95m"
  colorLightCyan="\e[96m"
  colorBgLightRed="\e[101m"
  colorBgLightGreen="\e[102m"

fi

#############
# Completed #
#############

completedList() {

  logPrint debug "Completed List"

  databaseTableList completed 100 desc 1 2 3

}

############
# Database #
############

databasePath="${HOME}/.lowbit-planner"
databaseTables="
  completed
  events
  habits
  inbox
  task
"

databaseCheckIfExists() {
  if [ -d "${databasePath}" ]; then
    logPrint debug "Database found at => ${databasePath}"
  else
    logPrint info "Database not found - Creating one at [${databasePath}]"
    databaseCreate
  fi
}

databaseCreate() {

  # Database (directory)
  mkdir -p "${databasePath}"    ; systemCheckReturnCode "Initializing database structure" "Error creating database structure"

  # Tables (files)
  for table in $databaseTables; do
    touch "${databasePath}/${table}.db" ; systemCheckReturnCode "Initializing table: ${table}" "Failed to initialize table '${table}'"
  done

}

databaseSync() {

  logPrint debug "Starting sync process"

  cd "${databasePath}"                                ; systemCheckReturnCode "Database - OK" "Database not found at '${databasePath}'"
  git pull                                            > /dev/null 2>&1  ; systemCheckReturnCode "Pulling remote changes - OK" "Failed to pull from git repository"
  git add .                                           > /dev/null 2>&1  ; systemCheckReturnCode "Adding local changes - OK" "Failed to add database for commit"
  git commit -m "Database update - `timestampGetNow`" > /dev/null 2>&1  # This step is not checked (it fails when there are no changes)
  git push                                            > /dev/null 2>&1  ; systemCheckReturnCode "Pushing to repository - OK" "Failed to push to git repository"

}

databaseTableCheckEntryExists() {

  logPrint debug "Checking if an entry exists in a column of a table"

  if [ "${2}" ]; then
    thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
    thisString="${1}" ; shift ; logPrint debug "String => ${thisString}"
  else
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  if [[ $(grep -e "${thisString}" "${databasePath}/${thisTable}.db") ]] ; then
    logPrint debug "Entry found"
    return 0
  else
    logPrint debug "Entry not found"
    return 1
  fi

}

databaseTableCount() {

  if [ "${1}" ]; then
    thisTable="${1}" ; shift
  else
    logPrint error "Missing table name"
    exit 1
  fi

  wc -l "${databasePath}/${thisTable}.db" | awk '{print $1}'

}

databaseTableDeleteByString() {

  logPrint debug "Database => Deleting entry by string"

  if [ ! "${2}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisString="${1}" ; shift ; logPrint debug "String => ${thisTable}"

  # Deleting
  sed --in-place=.bkp "/${thisString}/d" "${databasePath}/${thisTable}.db"

}

databaseTableDeleteFirst() {

  logPrint debug "Database => Delete first"

  if [ ! "${1}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"

  sed --in-place=.bkp '1d' "${databasePath}/${thisTable}.db"

}

databaseTableGetByString() {

  ## Input
  if [ $2 ]; then
    thisTable=$1  ; shift
    thisString=$1 ; shift
  else
    logPrint error "Missing one of required arguments"
    return 1
  fi

  ## Output
  grep "${thisString}" "${databasePath}/${thisTable}.db"

}

databaseTableGetFirst() {

  ## Input
  if [ $1 ]; then
    thisTable=$1  ; shift
  else
    logPrint error "Missing table name"
  fi

  ## Output
  head -n 1 "${databasePath}/${thisTable}.db"

}

databaseTableInsert() {

  logPrint debug "Database => Insert"

  if [ ! "${2}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisKey="${1}"    ; shift ; logPrint debug "Key => ${thisKey}"

  # Preparing the entry
  thisEntry="${thisKey}"

  # Appending additional/optional fields
  while [ "${1}" ]; do
    thisEntry="${thisEntry}|${1}"
    shift
  done

  # Adding entry to the table
  logPrint debug "Entry => ${thisEntry}"
  echo "${thisEntry}" >> "${databasePath}/${thisTable}.db"
  systemCheckReturnCode "Database operation - OK" "Failed to write to database"

}

databaseTableList() {

  logPrint debug "Database => List $@"

  if [ ! "${4}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisLimit="${1}"  ; shift ; logPrint debug "Limit => ${thisLimit}"
  thisOrder="${1}"  ; shift ; logPrint debug "Order => ${thisOrder}"
  thisKey="${1}"    ; shift ; logPrint debug "Key => ${thisKey}"

  # Validating Order arg
  case "${thisOrder}" in
    "asc"|"ASC")
      thisOrderCommand="head"
      ;;
    "desc"|"DESC")
      thisOrderCommand="tail"
      ;;
    *)
      logPrint error "Wrong value for 'order' argument"
      exit 1
      ;;
  esac

  # Header
  echo -e "${colorBold}${colorUnderline}${colorLightGreen}${thisTable^}${colorReset} ${colorDim}(limited to ${thisLimit})${colorReset}"
  echo

  # Looping through each entry
  IFS=$'\n'
  for entry in $(${thisOrderCommand} -n ${thisLimit} "${databasePath}/${thisTable}.db"); do

    # Key
    echo -en "${thisPrefix}${colorBold}`echo "${entry}" | cut -d'|' -f${thisKey}`${colorReset}"

    # Additional/optional fields
    unset IFS
    for field in $@; do
      echo -n " `echo "${entry}" | cut -d'|' -f$field`"
    done

    # New line
    echo

  done

}

databaseTableListFilter() {

  logPrint debug "Database => Listing with Filter"

  if [ ! "${3}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisString="${1}" ; shift ; logPrint debug "String => ${thisString}"
  thisKey="${1}"    ; shift ; logPrint debug "Key => ${thisKey}"

  # Header
  echo -e "${colorBold}${colorUnderline}${colorLightGreen}${thisTable^}${colorReset} ${colorDim}(results for '${thisString}')${colorReset}"
  echo

  # Looping through each entry
  IFS=$'\n'
  for entry in $(grep -i "${thisString}" "${databasePath}/${thisTable}.db"); do

    # Key
    echo -en "${thisPrefix}${colorBold}`echo "${entry}" | cut -d'|' -f${thisKey}`${colorReset}"

    # Additional/optional fields
    unset IFS
    for field in $@; do
      echo -n " `echo "${entry}" | cut -d'|' -f$field`"
    done

    # New line
    echo

  done

}

databaseTableShuffle() {

  logPrint debug "Shuffling table entries"

  ## Input
  if [ $1 ]; then
    thisTable="${1}" ; shift ; logPrint debug "Table => ${thisTable}"
  fi

  ## Output
  if sort "${databasePath}/${thisTable}.db" --random-sort --output="${databasePath}/${thisTable}.db" ; then
    logPrint debug "Table shuffled"
    return 0
  else
    logPrint debug "Failed to shuffle table"
    return 1
  fi
  
}

databaseTableSkip() {

  logPrint debug "Skipping item in database"

  ## Input
  if [ "${1}" ]; then
    thisTable="${1}" ; shift ; logPrint debug "Table => ${thisTable}"
  else
    logPrint error "Missing table name"
    return 1
  fi

  # Copying first entry of "database" to the end of the file
  head -n1 "${databasePath}/${thisTable}.db" >> "${databasePath}/${thisTable}.db"

  # Deleting first entry from the "database"
  sed --in-place=.bkp '1d' "${databasePath}/${thisTable}.db"


}

databaseTableSort() {

  logPrint debug "Sorting table entries"

  ## Input
  if [ $3 ]; then
    thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
    thisColumn="${1}" ; shift ; logPrint debug "Column => ${thisColumn}"
    thisOrder="${1}"  ; shift ; logPrint debug "Order => ${thisOrder}"
  fi

  # Validating Order arg
  case "${thisOrder}" in
    "asc"|"ASC")
      thisOrderCommand=""
      ;;
    "desc"|"DESC")
      thisOrderCommand="--reverse"
      ;;
    *)
      logPrint error "Wrong value for 'order' argument"
      exit 1
      ;;
  esac

  ## Output
  if sort "${databasePath}/${thisTable}.db" -s --field-separator "|" --key "${thisColumn}" ${thisOrderCommand} --output="${databasePath}/${thisTable}.db" ; then
    logPrint debug "Table sorted"
    return 0
  else
    logPrint debug "Failed to sort table"
    return 1
  fi
  
}

databaseTableUpdateEntry() {

  logPrint debug "Database => Updating an entry"

  if [ "${3}" ]; then
    # Assigning the user args
    thisTable="${1}"    ; shift ; logPrint debug "Table => ${thisTable}"
    thisOldValue="${1}" ; shift ; logPrint debug "Old Value => ${thisOldValue}"
    thisNewValue="${1}" ; shift ; logPrint debug "New Value => ${thisNewValue}"
  else
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Updating the entry
  if sed --in-place=.bkp s^"${thisOldValue}"^"${thisNewValue}"^ "${databasePath}/${thisTable}.db" ; then
    logPrint debug "OK - entry updated"
    return 0
  else
    logPrint error "Failed to update entry in table: ${thisTable}"
    exit 1
  fi

}

###########
# Do Mode #
###########

doCreateHabit() {

  echo "[H]:d::${thisItemName}" >> "${databaseHabits}"
  doDeleteItem

}

doCompleteItem() {

  echo "[X]:${thisItemName}" >> "${databaseCompleted}"
  doDeleteItem

}

doDeleteItem() {

  sed --in-place=.bkp '1d' "${databaseItems}"

}

doDraw() {

  thisItemsCount=`itemCount`
  thisItem=`head -n1 ${databaseItems}`
  thisItemStatus=`echo ${thisItem} | cut -d'|' -f1`
  thisItemName=`echo ${thisItem} | cut -d'|' -f3-`

  clear

  echo -e "${colorBold}${colorUnderline}Miniplan${colorReset} (${colorBold}${colorLightRed}Do!${colorReset})"
  echo
  echo -e "${colorDim}Pending Items: ${colorReset}${colorBold}${colorLightGreen}${thisItemsCount}${colorReset}"
  echo
  echo -e "${colorDim}Next Item:${colorReset}"
  echo -e "${colorBold}${thisItemStatus}${colorReset} ${colorLightYellow}${thisItemName}${colorReset}"
  echo
  echo -e "${colorDim}Options:${colorReset} ${colorUnderline}c${colorReset}omplete ${colorDim}|${colorReset} ${colorUnderline}l${colorReset}ater ${colorDim}|${colorReset} ${colorUnderline}h${colorReset}abit ${colorDim}|${colorReset} ${colorUnderline}d${colorReset}elete ${colorDim}|${colorReset} ${colorUnderline}n${colorReset}ew ${colorDim}|${colorReset} ${colorUnderline}q${colorReset}uit"
  echo

}

doNewItem() {
  clear
  read -p "New item name => " usrNewItemName
  itemAdd "${usrNewItemName}"

}

doSkipItem() {

  echo "[>]:${thisItemPriority}:${thisItemName}" >> "${databaseItems}"
  doDeleteItem

}

doStart() {

  while [ "${usrChoice}" != "q" ]; do
    doDraw
    read -p "Choice => " usrChoice

    case "${usrChoice}" in
  
      "c"|"complete")
        doCompleteItem
        ;;
      "l"|"later")
        doSkipItem
        ;;
      "h"|"habit")
        doCreateHabit
        ;;
      "d"|"delete")
        doDeleteItem
        ;;
      "n"|"new")
        doNewItem
        ;;
      "q"|"quit")
        break
        ;;

    esac
  
  done

  logPrint info "Thank you for using Miniplan"

}

#########
# Event #
#########

eventAdd() {

  logPrint debug "Event Add"

  if [ "${3}" ]; then
    thisEventDate="${1}"  ; logPrint debug "Event Date => ${thisEventDate}" ; shift
    thisEventTime="${1}"  ; logPrint debug "Event Time => ${thisEventTime}" ; shift
    thisEventName="${@}"  ; logPrint debug "Event Name => ${thisEventName}"
  else
    logPrint error "Missing one of required arguments"
    return 1
  fi

  # Validating the date arg
  timestampValidateDate ${thisEventDate}

  # Validate time
  timestampValidateTime ${thisEventTime}

  # Validating if an event with the same name already exists
  if databaseTableCheckEntryExists event ".|${thisEventName}$" ; then
    logPrint error "Event already exists: '${thisEventName}'"
    return 1
  fi

  # Adding the event
  if databaseTableInsert event "[E]" "${thisEventDate} ${thisEventTime}" "${thisEventName}" ; then
    logPrint info "New event created: '${thisEventName}'"
  else
    logPrint error "Failed to create event: '${thisEventName}'"
  fi

  # Sorting the event table by date
  databaseTableSort event 2 asc

}

eventComplete() {

  ## Input
  if [ "${1}" ]; then
    thisEventName="${@}"  ; logPrint debug "Event name => ${thisEventName}"
  else
    logPrint error "Missing event name"
    exit 1
  fi

  ## Processing

  # Validating if the event exists
  if ! databaseTableCheckEntryExists event ".|${thisEventName}$" ; then
    logPrint error "Event not found: '${thisEventName}'"
    exit 1
  fi
  
  # Marking as completed
  if ! databaseTableInsert completed "[X]" "`timestampGetNow`" "${thisEventName}" ; then
    logPrint error "Failed to mark event as completed: '${thisEventName}'"
    exit 1
  fi

  # Deleting from event table
  if ! databaseTableDeleteByString event "|${thisEventName}$" ; then
    logPrint error "Failed to delete event after marking it as completed: '${thisEventName}'"
    exit 1
  fi

  ## Output
  logPrint info "Yay! Another event completed: '${thisEventName}'"

}


eventDelete() {

  ## Input
  if [ "${1}" ]; then
    thisEventName="${@}"  ; logPrint debug "Event Name => ${thisEventName}"
  else
    logPrint error "Missing event name"
    exit 1
  fi

  ## Processing

  # Validating if the event exists
  if ! databaseTableCheckEntryExists event ".|${thisEventName}$" ; then
    logPrint error "Event not found: '${thisEventName}'"
    exit 1
  fi
  
  # Deleting the event
  if databaseTableDeleteByString event "|${thisEventName}$" ; then
    logPrint info "Event deleted: '${thisEventName}'"
  else
    logPrint error "Failed to delete event: '${thisEventName}'"
  fi

}

eventList() {

  logPrint debug "Event List"

  databaseTableList event 10 asc 1 2 3

}

eventShowUsage() {

  echo -e "${colorBold}Lowbit Planner - Event${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0` event${colorReset} ${colorUnderline}${colorLightRed}action${colorReset}${colorDim} [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Actions:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}add${colorReset} ${colorUnderline}date${colorReset} (YYYY-MM-DD) ${colorUnderline}time${colorReset} (HH:MM) ${colorUnderline}event_name${colorReset} ${colorDim}- Create a new event${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}complete${colorReset} ${colorUnderline}event_name${colorReset}                           ${colorDim}- Complete an event${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}delete${colorReset} ${colorUnderline}event_name${colorReset}                             ${colorDim}- Delete an event${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}list${colorReset}                                          ${colorDim}- List events${colorReset}"
  echo
  exit 0

}

eventRouter() {

  if [ $1 ]; then
    usrAction=$1  ; shift ; logPrint debug "Action => ${usrAction}"
  else
    eventShowUsage
  fi

  case ${usrAction} in
    "add")
      eventAdd "${@}"
      ;;
    "complete")
      eventComplete "${@}"
      ;;
    "delete")
      eventDelete "${@}"
      ;;
    "list")
      eventList
      ;;
    "--help"|"-h"|"help")
      eventShowUsage
      ;;
    *)
      logPrint error "Unknown action '${usrAction}'"
      ;;
  esac

}


#########
# Habit #
#########

habitAdd() {

  logPrint debug "Habit Add"

  if [ "${2}" ]; then
    thisHabitRecurrence="${1}"  ; logPrint debug "Habit Recurrence => ${thisHabitRecurrence}" ; shift
    thisHabitName="${@}"        ; logPrint debug "Habit Name => ${thisHabitName}"
  else
    logPrint error "Missing one of required arguments"
    return 1
  fi

  # Validating recurrence arg
  case "${thisHabitRecurrence}" in
    "d"|"daily")
      thisHabitRecurrenceOrder="10"
      thisHabitRecurrenceString="Daily  "
      ;;
    "w"|"weekly")
      thisHabitRecurrenceOrder="20"
      thisHabitRecurrenceString="Weekly "
      ;;
    "m"|"monthly")
      thisHabitRecurrenceOrder="30"
      thisHabitRecurrenceString="Monthly"
      ;;
    "y"|"yearly")
      thisHabitRecurrenceOrder="40"
      thisHabitRecurrenceString="Yearly "
      ;;
    *)
      logPrint error "Wrong value for 'recurrence' argument"
      return 1
      ;;
  esac

  # Validating if a habit with the same name already exists
  if databaseTableCheckEntryExists habit ".|${thisHabitName}$" ; then
    logPrint error "Habit already exists: '${thisHabitName}'"
    return 1
  fi

  # Adding the habit
  if databaseTableInsert habit "[H]" "${thisHabitRecurrenceOrder}" "${thisHabitRecurrenceString}" "1970-01-01 00:00 00" "[ ]" "${thisHabitName}" ; then
    logPrint info "New habit created: '${thisHabitName}'"
  else
    logPrint error "Failed to create habit: '${thisHabitName}'"
  fi

}

habitComplete() {

  ## Input
  if [ "${1}" ]; then
    thisHabitName="${@}"  ; logPrint debug "Habit name => ${thisHabitName}"
  else
    logPrint error "Missing habit name"
    return 1
  fi

  ## Processing

  # Validating if the habit exists
  if ! databaseTableCheckEntryExists habit ".|${thisHabitName}$" ; then
    logPrint error "Habit not found: '${thisHabitName}'"
    exit 1
  fi

  # Validating if the habit is already completed
  if ! databaseTableCheckEntryExists habit "[ ].|${thisHabitName}$" ; then
    logPrint warn "Habit already completed - Relax ;)"
    exit 0
  fi

  # Adding habit to completed table
  if ! databaseTableInsert completed "[X]" "`timestampGetNow`" "${thisHabitName}" ; then
    logPrint error "Failed to add habit to completed table: '${thisHabitName}'"
    exit 1
  fi

  # Marking habit as completed
  if ! databaseTableUpdateEntry habit "|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9] [0-9][0-9]|\[ \]|${thisHabitName}$" "|`timestampGetNowWithWeek`|\[X\]|${thisHabitName}" ; then
    logPrint error "Failed to mark habit as completed: '${thisHabitName}'"
    exit 1
  fi

  ## Output
  logPrint info "Yay! Another habit completed: '${thisHabitName}'"

}

habitDelete() {

  ## Input
  if [ "${1}" ]; then
    thisHabitName="${@}"  ; logPrint debug "Habit Name => ${thisHabitName}"
  else
    logPrint error "Missing habit name"
    exit 1
  fi

  ## Processing

  # Validating if the habit exists
  if ! databaseTableCheckEntryExists habit ".|${thisHabitName}$" ; then
    logPrint error "Habit not found: '${thisHabitName}'"
    exit 1
  fi
  
  # Deleting the habit
  if databaseTableDeleteByString habit "|${thisHabitName}$" ; then
    logPrint info "Habit deleted: '${thisHabitName}'"
  else
    logPrint error "Failed to delete habit: '${thisHabitName}'"
  fi

}

habitList() {

  logPrint debug "Habit List"

  # Refreshing the habits before listing
  habitRefresh

  databaseTableSort habit 2,2 asc
  databaseTableList habit 1000 asc 1 5 3 6

}

habitShowUsage() {

  echo -e "${colorBold}Lowbit Planner - Habit${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0` habit${colorReset} ${colorUnderline}${colorLightRed}action${colorReset}${colorDim} [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Actions:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}add${colorReset} ${colorUnderline}recurrence${colorReset} ${colorUnderline}habit_name${colorReset} ${colorDim}- Create a new habit${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}complete${colorReset} ${colorUnderline}habit_name${colorReset}       ${colorDim}- Complete a habit${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}delete${colorReset} ${colorUnderline}habit_name${colorReset}         ${colorDim}- Delete a habit${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}list${colorReset}                      ${colorDim}- List habits${colorReset}"
  echo
  exit 0

}

habitShuffle() {

  databaseTableShuffle habit        # Shuffling habits
  databaseTableSort habit 5,5 asc   # Sorting habits by completion (pending habits will be in the begining of table)

}

habitRefresh() {

  logPrint debug "Habit Refresh"

  logPrint info "Please wait until the habits are refreshed..."

  # Storing the current timestamp masks
  thisDay="`date '+%Y-%m-%d'`"
  thisWeek="`date '+%Y.*%U'`"
  thisMonth="`date '+%Y-%m'`"
  thisYear="`date '+%Y'`"

  IFS=$'\n'
  for habit in `databaseTableGetByString habit "[X]"`; do

    habitName=`echo ${habit} | cut -d'|' -f6`
    habitRecurrence=`echo ${habit} | cut -d'|' -f3 | tr -d ' '`
    habitCompleted=`echo ${habit} | cut -d'|' -f5`
    habitTimestamp=`echo ${habit} | cut -d'|' -f4`

    case "${habitRecurrence}" in

      "Daily")

        if [[ $(echo "${habitTimestamp}" | grep -e "${thisDay}") ]] ; then
          logPrint debug "Habit '${habitName}' is still valid - Ignoring"
          continue
        fi

        logPrint debug "Habit '${habitName}' is expired - Unchecking"
        if databaseTableUpdateEntry habit "|\[X\]|${habitName}$" "|\[ \]|${habitName}" ; then
          logPrint debug "Habit unchecked"
        else
          logPrint error "Failed to uncheck Habit '${habitName}'"
        fi
        ;;

      "Weekly")
        if [[ $(echo "${habitTimestamp}" | grep -e "${thisWeek}") ]] ; then
          logPrint debug "Habit '${habitName}' is still valid - Ignoring"
          continue
        fi

        logPrint debug "Habit '${habitName}' is expired - Unchecking"
        if databaseTableUpdateEntry habit "|\[X\]|${habitName}$" "|\[ \]|${habitName}" ; then
          logPrint debug "Habit unchecked"
        else
          logPrint error "Failed to uncheck Habit '${habitName}'"
        fi
        ;;

      "Monthly")
        if [[ $(echo "${habitTimestamp}" | grep -e "${thisMonth}") ]] ; then
          logPrint debug "Habit '${habitName}' is still valid - Ignoring"
          continue
        fi

        logPrint debug "Habit '${habitName}' is expired - Unchecking"
        if databaseTableUpdateEntry habit "|\[X\]|${habitName}$" "|\[ \]|${habitName}" ; then
          logPrint debug "Habit unchecked"
        else
          logPrint error "Failed to uncheck Habit '${habitName}'"
        fi
        ;;

      "Yearly")
        if [[ $(echo "${habitTimestamp}" | grep -e "${thisYear}") ]] ; then
          logPrint debug "Habit '${habitName}' is still valid - Ignoring"
          continue
        fi

        logPrint debug "Habit '${habitName}' is expired - Unchecking"
        if databaseTableUpdateEntry habit "|\[X\]|${habitName}$" "|\[ \]|${habitName}" ; then
          logPrint debug "Habit unchecked"
        else
          logPrint error "Failed to uncheck Habit '${habitName}'"
        fi
        ;;

      *)
        logPrint error "Unknown recurrence for habit"
        ;;
    esac

  done

  # Reseting IFS
  unset IFS

}

habitRouter() {

  if [ $1 ]; then
    usrAction=$1  ; shift ; logPrint debug "Action => ${usrAction}"
  else
    habitShowUsage
  fi

  case ${usrAction} in
    "add")
      habitAdd "${@}"
      ;;
    "complete")
      habitComplete "${@}"
      ;;
    "delete")
      habitDelete "${@}"
      ;;
    "list")
      habitList
      ;;
    "--help"|"-h"|"help")
      habitShowUsage
      ;;
    *)
      logPrint error "Unknown action '${usrAction}'"
      ;;
  esac

}

########
# Help #
########

helpShow() {

  echo "Help Topics:"
  echo "- Inbox"
  echo "- Tasks"
  echo "- Habits"
  echo "- Events"
  echo "- Quick Commands"
  echo "- Legend"
  echo "- Commands Usage"
  echo "- Search"
  echo "- Completed Items"
  echo "- Interactive Modes"
  echo "- Link"
  echo "- Update"
  echo "- Sync"

}

#########
# Inbox #
#########

inboxAdd() {

  logPrint debug "Inbox Add"

  if [ "${1}" ]; then
    thisInboxItemName="${@}"  ; logPrint debug "${thisInboxItemName}"
  else
    logPrint error "Missing inbox item name"
    return 1
  fi

  if databaseTableCheckEntryExists inbox ".|${thisInboxItemName}$" ; then
    logPrint error "Inbox item already exists: '${thisInboxItemName}'"
    return 1
  fi

  if databaseTableInsert inbox "=>" "`timestampGetNow`" "${thisInboxItemName}" ; then
    logPrint info "New inbox item: '${thisInboxItemName}'"
    return 0
  else
    logPrint error "Failed to add inbox item: '${thisInboxItemName}'"
    return 1
  fi

}

inboxDelete() {

  if [ ! "${1}" ]; then
    logPrint error "Missing inbox item name"
    return 1
  fi

  thisInboxItemName="${@}"

  if ! databaseTableCheckEntryExists inbox ".|${thisInboxItemName}$" ; then
    logPrint error "Item '${thisInboxItemName}' not found in Inbox"
    exit 1
  fi
  
  if databaseTableDeleteByString inbox "|${thisInboxItemName}$" ; then
    logPrint info "'${thisInboxItemName}' deleted from Inbox"
  else
    logPrint error "Failed to delete '${thisInboxItemName}' from Inbox"
  fi

}

inboxList() {

  logPrint debug "Inbox List"

  databaseTableList inbox 10 asc 1 3

}

inboxRouter() {

  if [ ! $1 ]; then
    inboxShowUsage
  fi

  usrAction=$1

  case ${usrAction} in
    "add")
      logPrint debug "Action => ${usrAction}"
      shift
      inboxAdd "${@}"
      ;;
    "delete")
      logPrint debug "Action => ${usrAction}"
      shift
      inboxDelete "${@}"
      ;;
    "list")
      logPrint debug "Action => ${usrAction}"
      shift
      inboxList
      ;;
    "--help"|"-h"|"help")
      logPrint debug "Action => ${usrAction}"
      inboxShowUsage
      ;;
    *)
      logPrint error "Unknown action '${usrAction}'"
      ;;
  esac

}

inboxShowUsage() {

  echo -e "${colorBold}Lowbit Planner - Inbox${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0` inbox${colorReset} ${colorUnderline}${colorLightRed}action${colorReset}${colorDim} [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Actions:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}add${colorReset} ${colorUnderline}item_name${colorReset}    ${colorDim}- Add an item to the inbox${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}delete${colorReset} ${colorUnderline}item_name${colorReset} ${colorDim}- Delete an item from the inbox${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}list${colorReset}             ${colorDim}- List inbox items${colorReset}"
  echo
  exit 0

}

###############
# Interactive #
###############

interactiveDecide() {

  usrMode="interactiveDecide"
  usrChoice=""

  while [ true ]; do

    interactiveDecideDraw

    case "${usrChoice}" in
      # Modes
      "r"|"review")
        interactiveReview
        ;;
      "w"|"work")
        interactiveWork
        ;;
      # Global Actions
      "a"|"add")
        interactiveInboxAdd   ; "${usrMode}"
        ;;
      "s"|"sync")
        clear ; databaseSync  ; "${usrMode}"
        ;;
      "q"|"quit")
        logPrint info "Good decision. Bye!" ; exit 0
        ;;
      # Local Actions
      *)
        true
        ;;
    esac

    read -p "Choice => " usrChoice

  done

}

interactiveDecideDraw() {

  clear

  echo -e "${colorDim}+-----------------------${colorReset} ${colorBold}Lowbit Planner${colorReset} ${colorDim}(Bash Edition) ${colorDim}------------------------+${colorReset}"
  echo -e "${colorDim}|                                                                              |${colorReset}"
  echo -e "${colorDim}+-----------------------${colorReset} ${colorBold}Modes${colorReset}: ${colorUnderline}r${colorReset}eview ${colorDim}|${colorReset} ${colorBgLightRed}${colorUnderline}d${colorReset}${colorBgLightRed}ecide${colorReset} ${colorDim}|${colorReset} ${colorUnderline}w${colorReset}ork${colorReset} ${colorDim}------------------------+${colorReset}"
  echo
  echo -e "Decision ${colorDim}(9/10)${colorReset}"
  echo
  echo -e "Progress: ${colorBold}[${colorBgLightGreen}                                                               ${colorReset}     ${colorBold}]${colorReset}"
  echo
  echo -e "  1. ${colorLightYellow}[ ] Not available${colorReset}"
  echo -e "  2. ${colorLightYellow}[ ] Come back soon =)${colorReset}"
  echo
  echo -e "${colorDim}Actions: ${colorUnderline}1${colorReset}${colorDim} | ${colorUnderline}2${colorReset}${colorDim} | ${colorUnderline}s${colorReset}${colorDim}kip-${colorUnderline}d${colorReset}${colorDim}ecision"
  echo
  echo -e "${colorDim}Global actions: ${colorUnderline}a${colorReset}${colorDim}dd (inbox) | ${colorUnderline}s${colorReset}${colorDim}ync | ${colorUnderline}q${colorReset}${colorDim}uit${colorReset}"
  echo

}

interactiveInboxAdd() {

  # Cleaning in memory variable
  thisInboxItemName=""

  # Asking user for inbox item name
  while [ -z "${thisInboxItemName}" ]; do
    clear
    read -p "Inbox item name => " thisInboxItemName
  done
  
  # Adding inbox item
  inboxAdd "${thisInboxItemName}"

  # "${usrMode}"

}

interactiveInboxToEvent() {

  # Cleaning in memory variables
  thisEventDate=""
  thisEventTime=""
  isValidDate=""
  isValidTime=""

  # Asking user for event date
  while [ "${isValidDate}" != "true" ]; do

    clear
    read -p "Event date (YYYY-MM-DD) => " thisEventDate

    if timestampValidateDate "${thisEventDate}" ; then
      isValidDate="true"
    fi

  done

  # Asking user for event time
  while [ "${isValidTime}" != "true" ]; do

    clear
    read -p "Event time (HH:MM) => " thisEventTime

    if timestampValidateTime "${thisEventTime}" ; then
      isValidTime="true"
    fi

  done

  # Adding event
  eventAdd "${thisEventDate}" "${thisEventTime}" "${nextInboxItemName}"

  # Deleting inbox item
  inboxDelete "${nextInboxItemName}"

}

interactiveInboxToHabit() {

  # Cleaning in memory variables
  thisHabitRecurrence=""
  isValidRecurrence=""

  # Asking user for habit recurrence
  while [ "${isValidRecurrence}" != "true" ]; do

    clear
    read -p "Habit frequency (daily/weekly/monthly/yearly) => " thisHabitRecurrence

    case "${thisHabitRecurrence}" in
      "daily")
        isValidRecurrence="true"
        ;;
      "weekly")
        isValidRecurrence="true"
        ;;
      "monthly")
        isValidRecurrence="true"
        ;;
      "yearly")
        isValidRecurrence="true"
        ;;
      *)
        isValidRecurrence="false"
        ;;
    esac

  done

  # Adding habit
  habitAdd "${thisHabitRecurrence}" "${nextInboxItemName}"

  # Deleting inbox item
  inboxDelete "${nextInboxItemName}"

}

interactiveReview() {

  usrMode="interactiveReview"
  usrChoice=""

  while [ true ]; do

    statsGet

    interactiveReviewDraw

    case "${usrChoice}" in
      # Modes
      "d"|"decide")
        interactiveDecide
        ;;
      "w"|"work")
        interactiveWork
        ;;
      # Global Actions
      "a"|"add")
        interactiveInboxAdd     ; "${usrMode}"
        ;;
      "s"|"sync")
        clear ; databaseSync    ; "${usrMode}"
        ;;
      "q"|"quit")
        logPrint info "Good review. Bye!" ; exit 0
        ;;
      # Local Actions
      "di"|"delete-item")
        inboxDelete "${nextInboxItemName}"
        "${usrMode}"
        ;;
      "e"|"event")
        interactiveInboxToEvent ; "${usrMode}"
        ;;
      "h"|"habit")
        interactiveInboxToHabit ; "${usrMode}"
        ;;
      "t"|"task")
        taskAdd "${nextInboxItemName}"
        inboxDelete "${nextInboxItemName}"
        "${usrMode}"
        ;;
      *)
        true
        ;;
    esac

    read -p "Choice => " usrChoice
  done

}

interactiveReviewDraw() {

  clear

  echo -e "${colorDim}+-----------------------${colorReset} ${colorBold}Lowbit Planner${colorReset} ${colorDim}(Bash Edition) ------------------------+${colorReset}"
  echo -e "${colorDim}|                                                                              |${colorReset}"
  echo -e "${colorDim}+-----------------------${colorReset} ${colorBold}Modes${colorReset}: ${colorBgLightRed}${colorUnderline}r${colorReset}${colorBgLightRed}eview${colorReset} ${colorDim}|${colorReset} ${colorUnderline}d${colorReset}ecide ${colorDim}|${colorReset} ${colorUnderline}w${colorReset}ork${colorReset} ${colorDim}------------------------+${colorReset}"
  echo
  echo -e "Inbox ${colorDim}(${colorLightGreen}${inboxCount}${colorReset}${colorDim})${colorReset}"
  echo
  echo -e "${nextInboxKey} ${colorBold}${colorLightGreen}${nextInboxItemName}${colorReset}"
  echo
  echo -e "${colorDim}Actions: ${colorUnderline}e${colorReset}${colorDim}vent | ${colorUnderline}h${colorReset}${colorDim}abit | ${colorUnderline}t${colorReset}${colorDim}ask | ${colorUnderline}d${colorReset}${colorDim}elete-${colorUnderline}i${colorReset}${colorDim}tem${colorReset}"
  echo
  echo -e "${colorDim}Global actions: ${colorUnderline}a${colorReset}${colorDim}dd (inbox) | ${colorUnderline}s${colorReset}${colorDim}ync | ${colorUnderline}q${colorReset}${colorDim}uit${colorReset}"
  echo

}

interactiveWork() {

  # Initializing variables
  usrMode="interactiveWork"
  usrChoice=""

  # Grabbing a habit
  habitShuffle

  while [ true ]; do

    statsGet

    interactiveWorkDraw

    case "${usrChoice}" in
      # Modes
      "d"|"decide")
        interactiveDecide
        ;;
      "r"|"review")
        interactiveReview
        ;;
      # Global Actions
      "a"|"add")
        interactiveInboxAdd   ; "${usrMode}"
        ;;
      "s"|"sync")
        clear ; databaseSync  ; "${usrMode}"
        ;;
      "q"|"quit")
        logPrint info "Good work. Bye!" ; exit 0
        ;;
      # Local Actions
      "ce"|"complete-event")
        eventComplete "${nextEventName}"
        "${usrMode}"
        ;;
      "ch"|"complete-habit")
        habitComplete "${nextHabitName}"
        "${usrMode}"
        ;;
      "ct"|"complete-task")
        taskComplete "${nextTaskName}"
        "${usrMode}"
        ;;
      "de"|"delete-event")
        eventDelete "${nextEventName}"
        "${usrMode}"
        ;;
      "dh"|"delete-habit")
        habitDelete "${nextHabitName}"
        "${usrMode}"
        ;;
      "dt"|"delete-task")
        taskDelete "${nextTaskName}"
        "${usrMode}"
        ;;
      "sh"|"skip-habit")
        habitShuffle
        "${usrMode}"
        ;;
      "st"|"skip-task")
        databaseTableSkip task
        "${usrMode}"
        ;;
      *)
        true
        ;;
    esac

    read -p "Choice => " usrChoice
  done

}

interactiveWorkDraw() {

  clear

  echo -e "${colorDim}+-----------------------${colorReset} ${colorBold}Lowbit Planner${colorReset} ${colorDim}(Bash Edition) ------------------------+${colorReset}"
  echo -e "${colorDim}|                                                                              |${colorReset}"
  echo -e "${colorDim}+-----------------------${colorReset} ${colorBold}Modes${colorReset}: ${colorUnderline}r${colorReset}eview ${colorDim}|${colorReset} ${colorUnderline}d${colorReset}ecide ${colorDim}|${colorReset} ${colorBgLightRed}${colorUnderline}w${colorReset}${colorBgLightRed}ork${colorReset} ${colorDim}------------------------+${colorReset}"
  echo
  echo -e "Next Items ${colorDim}${colorLightGray}(${colorLightGreen}${inboxCount}${colorLightGray}/${colorLightMagenta}${eventCount}${colorLightGray}/${colorLightYellow}${taskCount}${colorLightGray}/${colorLightCyan}${habitCount}${colorLightGray})${colorReset}"
  echo
  echo -e "  Event   : ${colorBold}${colorLightMagenta}${nextEventKey} ${nextEventName}${colorReset} (${nextEventTimestamp})"
  echo -e "  ${colorDim}Actions : ${colorUnderline}c${colorReset}${colorDim}omplete-${colorUnderline}e${colorReset}${colorDim}vent | ${colorUnderline}a${colorReset}${colorDim}dd-${colorUnderline}e${colorReset}${colorDim}vent | ${colorUnderline}d${colorReset}${colorDim}elete-${colorUnderline}e${colorReset}${colorDim}vent${colorReset}"
  echo
  echo -e "  Task    : ${colorBold}${colorLightYellow}${nextTaskKey} ${nextTaskName}${colorReset}"
  echo -e "  ${colorDim}Actions : ${colorUnderline}c${colorReset}${colorDim}omplete-${colorUnderline}t${colorReset}${colorDim}ask | ${colorUnderline}s${colorReset}${colorDim}kip-${colorUnderline}t${colorReset}${colorDim}ask | ${colorUnderline}a${colorReset}${colorDim}dd-${colorUnderline}t${colorReset}${colorDim}ask | ${colorUnderline}d${colorReset}${colorDim}elete-${colorUnderline}t${colorReset}${colorDim}ask${colorReset}"
  echo
  echo -e "  Habit   : ${colorBold}${colorLightCyan}${nextHabitKey} ${nextHabitName}${colorReset}"
  echo -e "${colorDim}  Actions : ${colorUnderline}c${colorReset}${colorDim}omplete-${colorUnderline}h${colorReset}${colorDim}abit | ${colorUnderline}s${colorReset}${colorDim}kip-${colorUnderline}h${colorReset}${colorDim}abit | ${colorUnderline}a${colorReset}${colorDim}dd-${colorUnderline}h${colorReset}${colorDim}abit | ${colorUnderline}d${colorReset}${colorDim}elete-${colorUnderline}h${colorReset}${colorDim}abit${colorReset}"
  echo
  echo -e "${colorDim}Global actions: ${colorUnderline}a${colorReset}${colorDim}dd (inbox) | ${colorUnderline}s${colorReset}${colorDim}ync | ${colorUnderline}q${colorReset}${colorDim}uit${colorReset}"
  echo

}

##########
# System #
##########

systemCheckReturnCode() {

  thisRC=$?
  thisStringOK="${1}"
  thisStringError="${2}"

  if [ $thisRC -eq 0 ]; then
    logPrint info "${thisStringOK}"
  else
    logPrint error "${thisStringError}"
    exit 1
  fi

}

systemLink() {

  if [ -h /usr/local/bin/plan ]; then
    logPrint info "The symbolic link already exists"
  else
    logPrint info "Creating a symbolic link to this script"
    logPrint user "You will be prompted to your 'sudo' password"
    sudo ln -s `realpath $0` /usr/local/bin/plan  ; systemCheckReturnCode "Symbolic link created" "Failed to create symbolic link"
  fi

}

########
# Item #
########

itemSearch() {
  
  logPrint debug "Searching items"

  ## Input
  if [ "${1}" ]; then
    thisSearchTerm="${1}" ; shift ; logPrint debug "Term => ${thisSearchTerm}"
  else
    logPrint error "Missing search term"
    exit 1
  fi

  ## Output
  databaseTableListFilter inbox "${thisSearchTerm}" 1 3       ; echo
  databaseTableListFilter event "${thisSearchTerm}" 1 2 3     ; echo
  databaseTableListFilter task "${thisSearchTerm}" 1 4        ; echo
  databaseTableListFilter habit "${thisSearchTerm}" 1 5 3 6   ; echo
  databaseTableListFilter completed "${thisSearchTerm}" 1 2 3 ; echo

}

#######
# Log #
#######

logPrint() {
  thisLogLevel="${1}"
  thisLogString="${2}"

  case $thisLogLevel in

    "debug")
      if [ "${DEBUG}" == "true" ]; then
        echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorDarkGray}debug${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      fi
      ;;
    "error")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightRed}error${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "info")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightGreen}info ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "user")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorBlink}${colorLightMagenta}user ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "warn")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightYellow}warn ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;

    *)
      echo "Error: Wrong log type"
      ;;

  esac

}

logTest() {
  logPrint debug "Test message"
  logPrint info "Test message"
  logPrint warn "Test message"
  logPrint error "Test message"
  logPrint user "Test message"
}

#########
# Stats #
#########

statsGet() {

  # Inbox
  inboxCount=`databaseTableCount inbox`
  nextInbox=`databaseTableGetFirst inbox`
  nextInboxKey=`echo "${nextInbox}" | cut -d'|' -f1`
  nextInboxItemName=`echo "${nextInbox}" | cut -d'|' -f3`

  # Event
  eventCount=`databaseTableCount event`
  nextEvent=`databaseTableGetFirst event`
  nextEventKey=`echo "${nextEvent}" | cut -d'|' -f1`
  nextEventName=`echo "${nextEvent}" | cut -d'|' -f3`
  nextEventTimestamp=`echo "${nextEvent}" | cut -d'|' -f2`

  # Task
  taskCount=`databaseTableCount task`
  nextTask=`databaseTableGetFirst task`
  nextTaskKey=`echo "${nextTask}" | cut -d'|' -f1`
  nextTaskName=`echo "${nextTask}" | cut -d'|' -f4`

  # Habit
  habitCount=`databaseTableCount habit`
  nextHabit=`databaseTableGetFirst habit`
  nextHabitCompleted=`echo "${nextHabit}" | cut -d'|' -f5`

  if [[ "${nextHabitCompleted}" == "[ ]" ]]; then
    nextHabitKey=`echo "${nextHabit}" | cut -d'|' -f1`
    nextHabitName=`echo "${nextHabit}" | cut -d'|' -f6`
  else
    unset nextHabitKey
    unset nextHabitName
  fi


}

##########
# Syntax #
##########

syntaxShow() {

  echo -e "${colorBold}Lowbit Planner - Bash Edition${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0`${colorReset} ${colorUnderline}${colorLightMagenta}command${colorReset} ${colorDim}[${colorReset}${colorUnderline}${colorLightRed}action${colorReset}${colorDim}] [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Quick commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}add${colorReset} ${colorUnderline}item_name${colorReset} ${colorDim}- Add an item to the inbox${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Basic commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}completed${colorReset}     ${colorDim}- List of completed items${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}event${colorReset}         ${colorDim}- Event operations${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}habit${colorReset}         ${colorDim}- Habit operations${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}inbox${colorReset}         ${colorDim}- Inbox operations${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}search${colorReset} ${colorUnderline}term${colorReset}   ${colorDim}- Search items in database${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}sync${colorReset}          ${colorDim}- Sync database using Git${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}task${colorReset}          ${colorDim}- Task operations${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Interactive commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}decide${colorReset}        ${colorDim}- Start the 'Decision' mode${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}review${colorReset}        ${colorDim}- Start the 'Revision' mode${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}work${colorReset}          ${colorDim}- Start the 'Work' mode${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}System Commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}--help${colorReset}        ${colorDim}- Display a help message${colorReset}"
  # echo -e "  ${colorUnderline}${colorLightMagenta}--install${colorReset}     ${colorDim}- Install this script${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}--link${colorReset}        ${colorDim}- Create a symbolic link to this script${colorReset}"
  # echo -e "  ${colorUnderline}${colorLightMagenta}--version${colorReset}     ${colorDim}- Display the script version${colorReset}"
  echo
  exit 0

}

########
# Task #
########

taskAdd() {

  logPrint debug "Task Add"

  if [ "${1}" ]; then
    thisTaskName="${@}" ; logPrint debug "${thisTaskName}"
  else
    logPrint error "Missing task name"
    return 1
  fi

  if databaseTableCheckEntryExists task ".|${thisTaskName}$" ; then
    logPrint error "Task already exists: '${thisTaskName}'"
    return 1
  fi

  if databaseTableInsert task "[ ]" "`timestampGetNow`" "0" "${thisTaskName}" ; then
    logPrint info "New task created: '${thisTaskName}'"
  else
    logPrint error "Failed to create task: '${thisTaskName}'"
  fi

}

taskComplete() {

  if [ ! "${1}" ]; then
    logPrint error "Missing task name"
    exit 1
  fi

  thisTaskName="${@}"

  if ! databaseTableCheckEntryExists task ".|${thisTaskName}$" ; then
    logPrint error "Task not found: '${thisTaskName}'"
    exit 1
  fi
  
  if ! databaseTableInsert completed "[X]" "`timestampGetNow`" "${thisTaskName}" ; then
    logPrint error "Failed to mark task as completed: '${thisTaskName}'"
    exit 1
  fi

  if ! databaseTableDeleteByString task "|${thisTaskName}$" ; then
    logPrint error "Failed to delete task after marking it as completed: '${thisTaskName}'"
    exit 1
  fi

  logPrint info "Yay! Another task completed: '${thisTaskName}'"

}


taskDelete() {

  if [ ! "${1}" ]; then
    logPrint error "Missing task name"
    exit 1
  fi

  thisTaskName="${@}"

  if ! databaseTableCheckEntryExists task ".|${thisTaskName}$" ; then
    logPrint error "Task not found: '${thisTaskName}'"
    exit 1
  fi
  
  if databaseTableDeleteByString task "|${thisTaskName}$" ; then
    logPrint info "Task deleted: '${thisTaskName}'"
  else
    logPrint error "Failed to delete task: '${thisTaskName}'"
  fi

}

taskList() {

  logPrint debug "Task List"

  databaseTableList task 10 asc 1 4

}

taskShowUsage() {

  echo -e "${colorBold}Lowbit Planner - Task${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0` task${colorReset} ${colorUnderline}${colorLightRed}action${colorReset}${colorDim} [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Actions:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}add${colorReset} ${colorUnderline}task_name${colorReset}            ${colorDim}- Create a new task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}complete${colorReset} ${colorUnderline}task_name${colorReset}       ${colorDim}- Complete a task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}delete${colorReset} ${colorUnderline}task_name${colorReset}         ${colorDim}- Delete a task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}list${colorReset}                     ${colorDim}- List tasks${colorReset}"
  echo
  exit 0

}

taskRouter() {

  if [ ! $1 ]; then
    taskShowUsage
  fi

  usrAction=$1

  case ${usrAction} in
    "add")
      logPrint debug "Action => ${usrAction}"
      shift
      taskAdd "${@}"
      ;;
    "complete")
      logPrint debug "Action => ${usrAction}"
      shift
      taskComplete "${@}"
      ;;
    "delete")
      logPrint debug "Action => ${usrAction}"
      shift
      taskDelete "${@}"
      ;;
    "list")
      logPrint debug "Action => ${usrAction}"
      shift
      taskList
      ;;
    "--help"|"-h"|"help")
      logPrint debug "Action => ${usrAction}"
      taskShowUsage
      ;;
    *)
      logPrint error "Unknown action '${usrAction}'"
      ;;
  esac

}

#############
# Timestamp #
#############

timestampGetNow() {
  date "+%Y-%m-%d %H:%M"
}

timestampGetNowWithWeek() {
  date "+%Y-%m-%d %H:%M %U"
}

timestampValidateDate() {

  if [ $1 ]; then
    thisDate="${1}" ; logPrint debug "Validating date => ${thisDate}"
  else
    logPrint error "Missing date argument to validate"
    return 1
  fi

  if [[ $(echo "${thisDate}" | grep -e "^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$") ]] ; then
    return 0
  else
    logPrint error "Invalid date format - Must be YYYY-MM-DD"
    return 1
  fi

}

timestampValidateTime() {

  if [ $1 ]; then
    thisTime="${1}" ; logPrint debug "Validating time => ${thisTime}"
  else
    logPrint error "Missing time argument to validate"
    return 1
  fi

  if [[ $(echo "${thisTime}" | grep -e "^[0-9][0-9]:[0-9][0-9]$") ]] ; then
    return 0
  else
    logPrint error "Invalid time format - Must be HH:MM"
    return 1
  fi

}

################################################################################

if [ $1 ]; then
  usrCommand=$1 ; shift ; logPrint debug "Command => ${usrCommand}"
else
  syntaxShow
fi

case ${usrCommand} in

  "add")
    databaseCheckIfExists
    inboxAdd "${@}"
    ;;
  "completed")
    databaseCheckIfExists
    completedList
    ;;
  "decide")
    databaseCheckIfExists
    interactiveDecide
    ;;
  "event")
    databaseCheckIfExists
    eventRouter "${@}"
    ;;
  "habit")
    databaseCheckIfExists
    habitRouter "${@}"
    ;;
  "inbox")
    databaseCheckIfExists
    inboxRouter "${@}"
    ;;
  "list")
    databaseCheckIfExists
    inboxList     ; echo
    eventList     ; echo
    taskList      ; echo
    habitList     ; echo
    completedList ; echo
    ;;
  "review")
    databaseCheckIfExists
    interactiveReview
    ;;
  "search")
    databaseCheckIfExists
    itemSearch "${@}"
    ;;
  "sync")
    databaseCheckIfExists
    databaseSync
    ;;
  "task")
    databaseCheckIfExists
    taskRouter "${@}"
    ;;
  "work")
    databaseCheckIfExists
    interactiveWork
    ;;
  "--help"|"-h"|"help")
    helpShow
    ;;
  "--link")
    systemLink
    ;;
  *)
    logPrint error "Unknown option '${usrCommand}'"
    ;;

esac