# !/bin/bash

#########
# Color #
#########

colorReset="\e[0m"
colorBold="\e[1m"
colorDim="\e[2m"
colorUnderline="\e[4m"
colorBlink="\e[5m"
colorRed="\e[31m"
colorGreen="\e[32m"
colorYellow="\e[33m"
colorBlue="\e[34m"
colorMagenta="\e[35m"
colorCyan="\e[36m"
colorLightGray="\e[37m"
colorDarkGray="\e[90m"
colorLightRed="\e[91m"
colorLightGreen="\e[92m"
colorLightYellow="\e[93m"
colorLightBlue="\e[94m"
colorLightMagenta="\e[95m"
colorLightCyan="\e[96m"

#############
# Completed #
#############

completedList() {
  echo -e "${colorBold}${colorUnderline}Miniplan - Completed:${colorReset} ${colorDarkGray}(10 last)${colorReset}" ; echo
  echo -e "$(tail -n 10 ${databaseCompleted})"
}

############
# Database #
############

databasePath="${HOME}/.miniplan"
databaseCompleted="${databasePath}/completed.db"
databaseHabits="${databasePath}/habits.db"
databaseItems="${databasePath}/items.db"

databaseCheckIfExists() {
  if [ -f "${databaseItems}" ]; then
    logPrint debug "Database found at => ${databasePath}"
  else
    logPrint info "Database not found - Creating one at [${databasePath}]"
    databaseCreate
  fi
}

databaseCreate() {
  mkdir -p "${databasePath}"    ; systemCheckReturnCode "Creating database structure"
  touch "${databaseItems}"      ; systemCheckReturnCode "Initializing Items database"
  touch "${databaseHabits}"     ; systemCheckReturnCode "Initializing Habits database"
  touch "${databaseCompleted}"  ; systemCheckReturnCode "Initializing Completed database"
}

###########
# Do Mode #
###########

doCompleteItem() {

  echo "[X]:${thisItemName}" >> "${databaseCompleted}"
  doDeleteItem

}

doDeleteItem() {

  sed -i .bkp '1d' "${databaseItems}"

}

doDraw() {

  thisItemsCount=`itemCount`
  thisItem=`head -n1 ${databaseItems}`
  thisItemStatus=`echo ${thisItem} | cut -d: -f1`
  thisItemName=`echo ${thisItem} | cut -d: -f3-`

  clear

  echo -e "${colorBold}${colorUnderline}Miniplan${colorReset} (${colorBold}${colorLightRed}Do!${colorReset})"
  echo
  echo -e "${colorDim}Pending Items: ${colorReset}${colorBold}${colorLightGreen}${thisItemsCount}${colorReset}"
  echo
  echo -e "${colorDim}Next Item:${colorReset}"
  echo -e "${colorBold}${thisItemStatus}${colorReset} ${colorLightYellow}${thisItemName}${colorReset}"
  echo
  echo -e "${colorDim}Options:${colorReset} ${colorUnderline}c${colorReset}omplete ${colorDim}|${colorReset} ${colorUnderline}l${colorReset}ater ${colorDim}|${colorReset} ${colorUnderline}h${colorReset}abit ${colorDim}|${colorReset} ${colorUnderline}d${colorReset}elete ${colorDim}|${colorReset} ${colorUnderline}n${colorReset}ew ${colorDim}|${colorReset} ${colorUnderline}q${colorReset}uit"
  echo

}

doNewItem() {
  clear
  read -p "New item name => " usrNewItemName
  itemAdd "${usrNewItemName}"

}

doSkipItem() {

  echo "[>]:${thisItemPriority}:${thisItemName}" >> "${databaseItems}"
  doDeleteItem

}

doStart() {

  while [ "${usrChoice}" != "q" ]; do
    doDraw
    read -p "Choice => " usrChoice

    case "${usrChoice}" in
  
      "c"|"complete")
        doCompleteItem
        ;;
      "l"|"later")
        doSkipItem
        ;;
      "h"|"habit")
        doCreateHabit
        ;;
      "d"|"delete")
        doDeleteItem
        ;;
      "n"|"new")
        doNewItem
        ;;
      "q"|"quit")
        break
        ;;

    esac
  
  done

  logPrint info "Thank you for using Miniplan"

}

########
# Help #
########

helpShow() {

  echo -e "${colorBold}${colorUnderline}Help${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Item Status:${colorReset}"
  echo -e " ${colorBold}[ ]${colorReset} ${colorDarkGray}- New Item${colorReset}"
  echo -e " ${colorBold}[>]${colorReset} ${colorDarkGray}- Later${colorReset}"
  echo -e " ${colorBold}[H]${colorReset} ${colorDarkGray}- Habit${colorReset}"
  echo -e " ${colorBold}[P]${colorReset} ${colorDarkGray}- Part of a project${colorReset}"
  echo -e " ${colorBold}[X]${colorReset} ${colorDarkGray}- Done${colorReset}"

}

##########
# System #
##########

systemCheckReturnCode() {

  thisRC=$?
  thisString=$1

  if [ $thisRC -eq 0 ]; then
    logPrint info "${thisString} - OK"
  else
    logPrint error "${thisString} - Failed"
  fi

}

systemConfigurePath() {

  echo "export PATH=${PATH}:$(dirname $(realpath $0))"

}

########
# Item #
########

itemAdd() {

  if [ "${1}" ]; then
    thisItemName="${@}"
  else
    logPrint error "You need to inform the item name"
    exit 1
  fi

  logPrint debug "Adding item => ${thisItemName}"

  echo "[ ]:0:${thisItemName}" >> "${databaseItems}"
  thisRC=$?

  if [ $thisRC -eq 0 ]; then
    logPrint info "Added item [${thisItemName}]"
  else
    logPrint error "Failed to add item [${thisItemName}] to the database"
    exit 1
  fi

}

itemCount() {

  cat "${databaseItems}" | wc -l | tr -d ' '

}

itemList() {
  echo -e "${colorBold}${colorUnderline}Miniplan - List:${colorReset} ${colorDarkGray}(10 first)${colorReset}" ; echo
  echo -e "$(head -n 10 ${databaseItems})"
}

#######
# Log #
#######

logPrint() {
  thisLogLevel="${1}"
  thisLogString="${2}"

  case $thisLogLevel in

    "debug")
      thisLogLevelColored="${colorDarkGray}debug${colorReset}"
      ;;
    "error")
      thisLogLevelColored="${colorLightRed}error${colorReset}"
      ;;
    "info")
      thisLogLevelColored="${colorLightGreen}info ${colorReset}"
      ;;
    "user")
      thisLogLevelColored="${colorBlink}${colorLightMagenta}user ${colorReset}"
      ;;
    "warn")
      thisLogLevelColored="${colorLightYellow}warn ${colorReset}"
      ;;

    *)
      echo "Error: Wrong log type"
      ;;

  esac

  echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${thisLogLevelColored}${colorDarkGray}]${colorReset} ${thisLogString}"
}

logTest() {
  logPrint debug "Test message"
  logPrint info "Test message"
  logPrint warn "Test message"
  logPrint error "Test message"
  logPrint user "Test message"
}

##########
# Syntax #
##########

syntaxShow() {

  echo
  echo -e "${colorBold}${colorLightGreen}Syntax:${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}add${colorReset} ${colorLightYellow}Task name${colorReset}    ${colorDim}- Adds a new item${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}completed${colorReset}        ${colorDim}- List last completed items${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}decide${colorReset}${colorReset} ${colorDarkGray}[${colorLightRed}--reset${colorDarkGray}] ${colorReset}${colorDim}- Enter the 'Decide' mode${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}do${colorReset}               ${colorDim}- Enter the 'Do' mode${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}habits${colorReset}           ${colorDim}- List all logged habits${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}help${colorReset}             ${colorDim}- Prints a help message${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}list${colorReset}             ${colorDim}- List next items${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}sync${colorReset}             ${colorDim}- Syncs the database using Git${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Other:${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}--install${colorReset}        ${colorDim}- Installs the executable${colorReset}"
  echo -e "  ${colorBold}`basename $0` ${colorUnderline}${colorLightMagenta}--path${colorReset}           ${colorDim}- Helper to configure the PATH env var${colorReset}"

}

##########
# Script #
##########

# Initializing

if [ "${1}" ]; then
  usrMode="${1}"
else
  echo -e "${colorBold}${colorUnderline}Miniplan${colorReset}"
  syntaxShow
  exit 0
fi

case ${usrMode} in

  "add")
    databaseCheckIfExists
    shift
    logPrint debug "Mode => add"
    itemAdd "${@}"
    ;;
  "completed")
    logPrint debug "Mode => completed"
    completedList
    ;;
  "do")
    databaseCheckIfExists
    logPrint debug "Mode => do"
    doStart
    ;;
  "help")
    logPrint debug "Mode => help"
    helpShow
    exit 0
    ;;
  "list")
    databaseCheckIfExists
    logPrint debug "Mode => list"
    itemList
    ;;
  "--path")
    systemConfigurePath
    ;;
  *)
    logPrint debug "Unknown User Argument => ${usrMode}"
    syntaxShow
    ;;

esac