#!/usr/bin/env bash

#########
# Color #
#########

if [ ! "${COLOR}" == "false" ]; then

  colorReset="\e[0m"
  colorBold="\e[1m"
  colorDim="\e[2m"
  colorUnderline="\e[4m"
  colorBlink="\e[5m"
  colorRed="\e[31m"
  colorGreen="\e[32m"
  colorYellow="\e[33m"
  colorBlue="\e[34m"
  colorMagenta="\e[35m"
  colorCyan="\e[36m"
  colorLightGray="\e[37m"
  colorDarkGray="\e[90m"
  colorLightRed="\e[91m"
  colorLightGreen="\e[92m"
  colorLightYellow="\e[93m"
  colorLightBlue="\e[94m"
  colorLightMagenta="\e[95m"
  colorLightCyan="\e[96m"
  colorBgLightRed="\e[101m"
  colorBgLightGreen="\e[102m"

fi

#############
# Completed #
#############

completedList() {

  logPrint debug "Completed List"

  databaseTableList completed 100 desc 1 2 3

}

############
# Database #
############

databasePath="${HOME}/.lowbit-planner"
databaseTables="
  completed
  events
  habits
  inbox
  task
"

databaseCheckIfExists() {
  if [ -d "${databasePath}" ]; then
    logPrint debug "Database found at => ${databasePath}"
  else
    logPrint info "Database not found - Creating one at [${databasePath}]"
    databaseCreate
  fi
}

databaseCreate() {

  # Database (directory)
  mkdir -p "${databasePath}"    ; systemCheckReturnCode "Initializing database structure" "Error creating database structure"

  # Tables (files)
  for table in $databaseTables; do
    touch "${databasePath}/${table}.db" ; systemCheckReturnCode "Initializing table: ${table}" "Failed to initialize table '${table}'"
  done

}

databaseTableCheckEntryExists() {

  logPrint debug "Checking if an entry exists in a column of a table"

  if [ "${2}" ]; then
    thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
    thisString="${1}" ; shift ; logPrint debug "String => ${thisString}"
  else
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  if [[ $(grep -e "${thisString}" "${databasePath}/${thisTable}.db") ]] ; then
    logPrint debug "Entry found"
    return 0
  else
    logPrint debug "Entry not found"
    return 1
  fi

}

databaseTableDeleteByString() {

  logPrint debug "Database => Deleting entry by string"

  if [ ! "${2}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisString="${1}" ; shift ; logPrint debug "String => ${thisTable}"

  # Deleting
  sed -i .bkp "/${thisString}/d" "${databasePath}/${thisTable}.db"

}

databaseTableDeleteFirst() {

  logPrint debug "Database => Delete first"

  if [ ! "${1}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"

  sed -i .bkp '1d' "${databasePath}/${thisTable}.db"

}

databaseTableInsert() {

  logPrint debug "Database => Insert"

  if [ ! "${2}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisKey="${1}"    ; shift ; logPrint debug "Key => ${thisKey}"

  # Preparing the entry
  thisEntry="${thisKey}"

  # Appending additional/optional fields
  while [ "${1}" ]; do
    thisEntry="${thisEntry}|${1}"
    shift
  done

  # Adding entry to the table
  logPrint debug "Entry => ${thisEntry}"
  echo "${thisEntry}" >> "${databasePath}/${thisTable}.db"
  systemCheckReturnCode "Database operation - OK" "Failed to write to database"

}

databaseTableList() {

  logPrint debug "Database => List $@"

  if [ ! "${4}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisLimit="${1}"  ; shift ; logPrint debug "Limit => ${thisLimit}"
  thisOrder="${1}"  ; shift ; logPrint debug "Order => ${thisOrder}"
  thisKey="${1}"    ; shift ; logPrint debug "Key => ${thisKey}"

  # Validating Order arg
  case "${thisOrder}" in
    "asc"|"ASC")
      thisOrderCommand="head"
      ;;
    "desc"|"DESC")
      thisOrderCommand="tail"
      ;;
    *)
      logPrint error "Wrong value for 'order' argument"
      exit 1
      ;;
  esac

  # Header
  echo -e "${colorBold}${colorUnderline}${colorLightGreen}${thisTable^}${colorReset} ${colorDim}(limited to ${thisLimit})${colorReset}"
  echo

  # Looping through each entry
  IFS=$'\n'
  for entry in $(${thisOrderCommand} -n ${thisLimit} "${databasePath}/${thisTable}.db"); do

    # Key
    echo -en "${thisPrefix}${colorBold}`echo "${entry}" | cut -d'|' -f${thisKey}`${colorReset}"

    # Additional/optional fields
    unset IFS
    for field in $@; do
      echo -n " `echo "${entry}" | cut -d'|' -f$field`"
    done

    # New line
    echo

  done

}

###########
# Do Mode #
###########

doCreateHabit() {

  echo "[H]:d::${thisItemName}" >> "${databaseHabits}"
  doDeleteItem

}

doCompleteItem() {

  echo "[X]:${thisItemName}" >> "${databaseCompleted}"
  doDeleteItem

}

doDeleteItem() {

  sed -i .bkp '1d' "${databaseItems}"

}

doDraw() {

  thisItemsCount=`itemCount`
  thisItem=`head -n1 ${databaseItems}`
  thisItemStatus=`echo ${thisItem} | cut -d'|' -f1`
  thisItemName=`echo ${thisItem} | cut -d'|' -f3-`

  clear

  echo -e "${colorBold}${colorUnderline}Miniplan${colorReset} (${colorBold}${colorLightRed}Do!${colorReset})"
  echo
  echo -e "${colorDim}Pending Items: ${colorReset}${colorBold}${colorLightGreen}${thisItemsCount}${colorReset}"
  echo
  echo -e "${colorDim}Next Item:${colorReset}"
  echo -e "${colorBold}${thisItemStatus}${colorReset} ${colorLightYellow}${thisItemName}${colorReset}"
  echo
  echo -e "${colorDim}Options:${colorReset} ${colorUnderline}c${colorReset}omplete ${colorDim}|${colorReset} ${colorUnderline}l${colorReset}ater ${colorDim}|${colorReset} ${colorUnderline}h${colorReset}abit ${colorDim}|${colorReset} ${colorUnderline}d${colorReset}elete ${colorDim}|${colorReset} ${colorUnderline}n${colorReset}ew ${colorDim}|${colorReset} ${colorUnderline}q${colorReset}uit"
  echo

}

doNewItem() {
  clear
  read -p "New item name => " usrNewItemName
  itemAdd "${usrNewItemName}"

}

doSkipItem() {

  echo "[>]:${thisItemPriority}:${thisItemName}" >> "${databaseItems}"
  doDeleteItem

}

doStart() {

  while [ "${usrChoice}" != "q" ]; do
    doDraw
    read -p "Choice => " usrChoice

    case "${usrChoice}" in
  
      "c"|"complete")
        doCompleteItem
        ;;
      "l"|"later")
        doSkipItem
        ;;
      "h"|"habit")
        doCreateHabit
        ;;
      "d"|"delete")
        doDeleteItem
        ;;
      "n"|"new")
        doNewItem
        ;;
      "q"|"quit")
        break
        ;;

    esac
  
  done

  logPrint info "Thank you for using Miniplan"

}

#########
# Event #
#########

eventAdd() {

  logPrint debug "Event Add"

  if [ "${3}" ]; then
    thisEventDate="${1}"  ; logPrint debug "${thisEventDate}" ; shift
    thisEventTime="${1}"  ; logPrint debug "${thisEventTime}" ; shift
    thisEventName="${@}"  ; logPrint debug "${thisEventName}"
  else
    logPrint error "Missing one of required arguments"
    exit 1
  fi

  if databaseTableCheckEntryExists event "|${thisEventName}$" ; then
    logPrint error "Event already exists: '${thisEventName}'"
    exit 1
  fi

  if databaseTableInsert event "[E]" "${thisEventDate} ${thisEventTime}" "${thisEventName}" ; then
    logPrint info "New event created: '${thisEventName}'"
  else
    logPrint error "Failed to create event: '${thisEventName}'"
  fi

}

eventComplete() {

  if [ ! "${1}" ]; then
    logPrint error "Missing task name"
    exit 1
  fi

  thisTaskName="${@}"

  if ! databaseTableCheckEntryExists task "|${thisTaskName}$" ; then
    logPrint error "Task not found: '${thisTaskName}'"
    exit 1
  fi
  
  if ! databaseTableInsert completed "[X]" "`timestampGetNow`" "${thisTaskName}" ; then
    logPrint error "Failed to mark task as completed: '${thisTaskName}'"
    exit 1
  fi

  if ! databaseTableDeleteByString task "|${thisTaskName}$" ; then
    logPrint error "Failed to delete task after marking it as completed: '${thisTaskName}'"
    exit 1
  fi

  logPrint info "Yay! Another task completed: '${thisTaskName}'"

}


eventDelete() {

  if [ ! "${1}" ]; then
    logPrint error "Missing task name"
    exit 1
  fi

  thisTaskName="${@}"

  if ! databaseTableCheckEntryExists task "|${thisTaskName}$" ; then
    logPrint error "Task not found: '${thisTaskName}'"
    exit 1
  fi
  
  if databaseTableDeleteByString task "|${thisTaskName}$" ; then
    logPrint info "Task deleted: '${thisTaskName}'"
  else
    logPrint error "Failed to delete task: '${thisTaskName}'"
  fi

}

eventList() {

  logPrint debug "Task List"

  databaseTableList task 10 asc 1 4

}

eventShowUsage() {

  echo -e "${colorBold}Lowbit Planner - Task${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0` task${colorReset} ${colorUnderline}${colorLightRed}action${colorReset}${colorDim} [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Actions:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}add${colorReset} ${colorUnderline}task_name${colorReset}            ${colorDim}- Create a new task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}complete${colorReset} ${colorUnderline}task_name${colorReset}       ${colorDim}- Complete a task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}delete${colorReset} ${colorUnderline}task_name${colorReset}         ${colorDim}- Delete a task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}list${colorReset}                     ${colorDim}- List tasks${colorReset}"
  echo
  exit 0

}

eventRouter() {

  if [ $1 ]; then
    usrAction=$1  ; shift ; logPrint debug "Action => ${usrAction}"
  else
    eventShowUsage
  fi

  case ${usrAction} in
    "add")
      eventAdd "${@}"
      ;;
    "complete")
      eventComplete "${@}"
      ;;
    "delete")
      eventDelete "${@}"
      ;;
    "list")
      eventList
      ;;
    "--help"|"-h"|"help")
      eventShowUsage
      ;;
    *)
      logPrint error "Unknown action '${usrAction}'"
      ;;
  esac

}


#########
# Habit #
#########

habitList() {
  echo -e "${colorBold}${colorUnderline}Miniplan - Habits:${colorReset}" ; echo
  cat ${databaseHabits}
}

########
# Help #
########

helpShow() {

  echo "Help Topics:"
  echo "- Inbox"
  echo "- Tasks"
  echo "- Habits"
  echo "- Events"
  echo "- Quick Commands"
  echo "- Legend"
  echo "- Commands Usage"
  echo "- Search"
  echo "- Completed Items"
  echo "- Interactive Modes"
  echo "- Link"
  echo "- Update"
  echo "- Sync"

}

#########
# Inbox #
#########

inboxAdd() {

  logPrint debug "Inbox Add"

  if [ "${1}" ]; then
    thisInboxItemName="${@}"  ; logPrint debug "${thisInboxItemName}"
  else
    logPrint error "Missing inbox item name"
    exit 1
  fi

  if databaseTableCheckEntryExists inbox "|${thisInboxItemName}$" ; then
    logPrint error "Inbox item already exists: '${thisInboxItemName}'"
    exit 1
  fi

  if databaseTableInsert inbox "-" "`timestampGetNow`" "${thisInboxItemName}" ; then
    logPrint info "New inbox item: '${thisInboxItemName}'"
  else
    logPrint error "Failed to add inbox item: '${thisInboxItemName}'"
  fi

}

inboxDelete() {

  if [ ! "${1}" ]; then
    logPrint error "Missing inbox item name"
    exit 1
  fi

  thisInboxItemName="${@}"

  if ! databaseTableCheckEntryExists inbox "|${thisInboxItemName}$" ; then
    logPrint error "Item '${thisInboxItemName}' not found in Inbox"
    exit 1
  fi
  
  if databaseTableDeleteByString inbox "|${thisInboxItemName}$" ; then
    logPrint info "'${thisInboxItemName}' deleted from Inbox"
  else
    logPrint error "Failed to delete '${thisInboxItemName}' from Inbox"
  fi

}

inboxList() {

  logPrint debug "Inbox List"

  databaseTableList inbox 10 asc 1 3

}

inboxRouter() {

  if [ ! $1 ]; then
    inboxShowUsage
  fi

  usrAction=$1

  case ${usrAction} in
    "add")
      logPrint debug "Action => ${usrAction}"
      shift
      inboxAdd "${@}"
      ;;
    "delete")
      logPrint debug "Action => ${usrAction}"
      shift
      inboxDelete "${@}"
      ;;
    "list")
      logPrint debug "Action => ${usrAction}"
      shift
      inboxList
      ;;
    "--help"|"-h"|"help")
      logPrint debug "Action => ${usrAction}"
      inboxShowUsage
      ;;
    *)
      logPrint error "Unknown action '${usrAction}'"
      ;;
  esac

}

inboxShowUsage() {

  echo -e "${colorBold}Lowbit Planner - Inbox${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0` inbox${colorReset} ${colorUnderline}${colorLightRed}action${colorReset}${colorDim} [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Actions:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}add${colorReset} ${colorUnderline}item_name${colorReset}    ${colorDim}- Add an item to the inbox${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}delete${colorReset} ${colorUnderline}item_name${colorReset} ${colorDim}- Delete an item from the inbox${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}list${colorReset}             ${colorDim}- List inbox items${colorReset}"
  echo
  exit 0

}

###############
# Interactive #
###############

interactiveDecide() {

  usrChoice=""

  while [ true ]; do

    interactiveDecideDraw

    case "${usrChoice}" in
      "review"|"r")
        interactiveReview
        ;;
      "work"|"w")
        interactiveWork
        ;;
      "quit"|"q")
        exit 0
        ;;
      *)
        true
        ;;
    esac

    read -p "Choice => " usrChoice

  done

}

interactiveDecideDraw() {

  clear

  echo -e "${colorBold}Lowbit Planner${colorReset} ${colorDim}(Bash Edition)${colorReset}"
  echo -e
  echo -e "${colorBold}Modes${colorReset}: ${colorUnderline}r${colorReset}eview ${colorDim}|${colorReset} ${colorBgLightRed}${colorUnderline}d${colorReset}${colorBgLightRed}ecide${colorReset} ${colorDim}|${colorReset} ${colorUnderline}w${colorReset}ork${colorReset}"
  echo
  echo -e "${colorDim}--------------------------------------------------------------------------------${colorReset}"
  echo
  echo -e "Decision ${colorDim}(9/10)${colorReset}"
  echo
  echo -e "Progress: ${colorBold}[${colorBgLightGreen}                                                               ${colorReset}     ${colorBold}]${colorReset}"
  echo
  echo -e "  1. ${colorLightYellow}[>] Write a book${colorReset}"
  echo -e "  2. ${colorLightYellow}[ ] Update LinkedIn${colorReset}"
  echo
  echo -e "${colorDim}Actions: ${colorUnderline}1${colorReset}${colorDim} | ${colorUnderline}2${colorReset}${colorDim} | ${colorUnderline}s${colorReset}${colorDim}kip-${colorUnderline}d${colorReset}${colorDim}ecision"
  echo
  echo -e "${colorDim}Global actions: ${colorUnderline}a${colorReset}${colorDim}dd (inbox) | ${colorUnderline}s${colorReset}${colorDim}ync | ${colorUnderline}q${colorReset}${colorDim}uit${colorReset}"
  echo

}

interactiveReview() {

  usrChoice=""

  while [ true ]; do

    interactiveReviewDraw

    case "${usrChoice}" in
      "decide"|"d")
        interactiveDecide
        ;;
      "work"|"w")
        interactiveWork
        ;;
      "quit"|"q")
        exit 0
        ;;
      *)
        true
        ;;
    esac

    read -p "Choice => " usrChoice
  done

}

interactiveReviewDraw() {

  clear

  echo -e "${colorBold}Lowbit Planner${colorReset} ${colorDim}(Bash Edition)${colorReset}"
  echo
  echo -e "${colorBold}Modes${colorReset}: ${colorBgLightRed}${colorUnderline}r${colorReset}${colorBgLightRed}eview${colorReset} ${colorDim}|${colorReset} ${colorUnderline}d${colorReset}ecide ${colorDim}|${colorReset} ${colorUnderline}w${colorReset}ork${colorReset}"
  echo
  echo -e "${colorDim}--------------------------------------------------------------------------------${colorReset}"
  echo
  echo -e "Inbox ${colorDim}(5)${colorReset}"
  echo
  echo -e "  => ${colorBold}${colorLightGreen}Practice on Duolingo${colorReset}"
  echo
  echo -e "${colorDim}Actions: ${colorUnderline}e${colorReset}${colorDim}vent | ${colorUnderline}h${colorReset}${colorDim}abit | ${colorUnderline}t${colorReset}${colorDim}ask | ${colorUnderline}d${colorReset}${colorDim}elete${colorReset}"
  echo
  echo -e "${colorDim}Global actions: ${colorUnderline}a${colorReset}${colorDim}dd (inbox) | ${colorUnderline}s${colorReset}${colorDim}ync | ${colorUnderline}q${colorReset}${colorDim}uit${colorReset}"
  echo

}

interactiveWork() {

  usrChoice=""

  while [ true ]; do

    interactiveWorkDraw

    case "${usrChoice}" in
      "decide"|"d")
        interactiveDecide
        ;;
      "review"|"r")
        interactiveReview
        ;;
      "quit"|"q")
        exit 0
        ;;
      *)
        true
        ;;
    esac

    read -p "Choice => " usrChoice
  done

}

interactiveWorkDraw() {

  clear

  echo -e "${colorBold}Lowbit Planner${colorReset} ${colorDim}(Bash Edition)${colorReset}"
  echo
  echo -e "${colorBold}Modes${colorReset}: ${colorUnderline}r${colorReset}eview ${colorDim}|${colorReset} ${colorUnderline}d${colorReset}ecide ${colorDim}|${colorReset} ${colorBgLightRed}${colorUnderline}w${colorReset}${colorBgLightRed}ork${colorReset}"
  echo
  echo -e "${colorDim}--------------------------------------------------------------------------------${colorReset}"
  echo
  echo -e "Next Items ${colorDim}${colorLightGray}(${colorLightGreen}5${colorLightGray}/${colorLightMagenta}2${colorLightGray}/${colorLightYellow}14${colorLightGray}/${colorLightCyan}4${colorLightGray})${colorReset}"
  echo
  echo -e "  Event   : ${colorBold}${colorLightMagenta}[E] Next Event${colorReset}"
  echo -e "  ${colorDim}Actions : ${colorUnderline}c${colorReset}${colorDim}omplete-${colorUnderline}e${colorReset}${colorDim}vent | ${colorUnderline}a${colorReset}${colorDim}dd-${colorUnderline}e${colorReset}${colorDim}vent | ${colorUnderline}d${colorReset}${colorDim}elete-${colorUnderline}e${colorReset}${colorDim}vent${colorReset}"
  echo
  echo -e "  Task    : ${colorBold}${colorLightYellow}[ ] Next Task${colorReset}"
  echo -e "  ${colorDim}Actions : ${colorUnderline}c${colorReset}${colorDim}omplete-${colorUnderline}t${colorReset}${colorDim}ask | ${colorUnderline}s${colorReset}${colorDim}kip-${colorUnderline}t${colorReset}${colorDim}ask | ${colorUnderline}a${colorReset}${colorDim}dd-${colorUnderline}t${colorReset}${colorDim}ask | ${colorUnderline}d${colorReset}${colorDim}elete-${colorUnderline}t${colorReset}${colorDim}ask"
  echo -e "            ${colorUnderline}p${colorReset}${colorDim}roject${colorReset}"
  echo
  echo -e "  Habit   : ${colorBold}${colorLightCyan}[H] Next Habit${colorReset}"
  echo -e "${colorDim}  Actions : ${colorUnderline}c${colorReset}${colorDim}omplete-${colorUnderline}h${colorReset}${colorDim}abit | ${colorUnderline}s${colorReset}${colorDim}kip-${colorUnderline}h${colorReset}${colorDim}abit | ${colorUnderline}a${colorReset}${colorDim}dd-${colorUnderline}h${colorReset}${colorDim}abit | ${colorUnderline}d${colorReset}${colorDim}elete-${colorUnderline}h${colorReset}${colorDim}abit${colorReset}"
  echo
  echo -e "${colorDim}Global actions: ${colorUnderline}a${colorReset}${colorDim}dd (inbox) | ${colorUnderline}s${colorReset}${colorDim}ync | ${colorUnderline}q${colorReset}${colorDim}uit${colorReset}"
  echo

}

##########
# System #
##########

systemCheckReturnCode() {

  thisRC=$?
  thisStringOK="${1}"
  thisStringError="${2}"

  if [ $thisRC -eq 0 ]; then
    logPrint debug "${thisStringOK}"
  else
    logPrint error "${thisStringError}"
    exit 1
  fi

}

systemLink() {

  if [ -h /usr/local/bin/plan ]; then
    logPrint info "The symbolic link already exists"
  else
    logPrint info "Creating a symbolic link to this script"
    logPrint user "You will be prompted to your 'sudo' password"
    sudo ln -s `realpath $0` /usr/local/bin/plan  ; systemCheckReturnCode "Symbolic link created" "Failed to create symbolic link"
  fi

}

########
# Item #
########

itemAdd() {

  if [ "${1}" ]; then
    thisItemName="${@}"
  else
    logPrint error "You need to inform the item name"
    exit 1
  fi

  logPrint debug "Adding item => ${thisItemName}"

  echo "[ ]:0:${thisItemName}" >> "${databaseItems}"
  thisRC=$?

  if [ $thisRC -eq 0 ]; then
    logPrint info "Added item [${thisItemName}]"
  else
    logPrint error "Failed to add item [${thisItemName}] to the database"
    exit 1
  fi

}

itemCount() {

  cat "${databaseItems}" | wc -l | tr -d ' '

}

itemList() {
  echo -e "${colorBold}${colorUnderline}Miniplan - List:${colorReset} ${colorDarkGray}(10 first)${colorReset}" ; echo
  echo -e "$(head -n 10 ${databaseItems})"
}

#######
# Log #
#######

logPrint() {
  thisLogLevel="${1}"
  thisLogString="${2}"

  case $thisLogLevel in

    "debug")
      if [ "${DEBUG}" == "true" ]; then
        echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorDarkGray}debug${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      fi
      ;;
    "error")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightRed}error${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "info")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightGreen}info ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "user")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorBlink}${colorLightMagenta}user ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "warn")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightYellow}warn ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;

    *)
      echo "Error: Wrong log type"
      ;;

  esac

}

logTest() {
  logPrint debug "Test message"
  logPrint info "Test message"
  logPrint warn "Test message"
  logPrint error "Test message"
  logPrint user "Test message"
}

##########
# Syntax #
##########

syntaxShow() {

  echo -e "${colorBold}Lowbit Planner - Bash Edition${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0`${colorReset} ${colorUnderline}${colorLightMagenta}command${colorReset} ${colorDim}[${colorReset}${colorUnderline}${colorLightRed}action${colorReset}${colorDim}] [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Quick commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}add${colorReset} ${colorUnderline}item_name${colorReset} ${colorDim}- Add an item to the inbox${colorReset}"
  # echo
  echo -e "${colorBold}${colorLightGreen}Basic commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}completed${colorReset}     ${colorDim}- List of completed items${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}event${colorReset}         ${colorDim}- Event operations${colorReset}"
  # echo -e "  ${colorUnderline}${colorLightMagenta}habit${colorReset}         ${colorDim}- Habit operations${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}inbox${colorReset}         ${colorDim}- Inbox operations${colorReset}"
  # echo -e "  ${colorUnderline}${colorLightMagenta}list${colorReset}          ${colorDim}- List of next items${colorReset}"
  # echo -e "  ${colorUnderline}${colorLightMagenta}search${colorReset}        ${colorDim}- Search items in database${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}task${colorReset}          ${colorDim}- Task operations${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Interactive commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}decide${colorReset}        ${colorDim}- Start the 'Decision' mode${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}review${colorReset}        ${colorDim}- Start the 'Revision' mode${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}work${colorReset}          ${colorDim}- Start the 'Work' mode${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}System Commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}--help${colorReset}        ${colorDim}- Display a help message${colorReset}"
  # echo -e "  ${colorUnderline}${colorLightMagenta}--install${colorReset}     ${colorDim}- Install this script${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}--link${colorReset}        ${colorDim}- Create a symbolic link to this script${colorReset}"
  # echo -e "  ${colorUnderline}${colorLightMagenta}--version${colorReset}     ${colorDim}- Display the script version${colorReset}"
  echo
  exit 0

}

########
# Task #
########

taskAdd() {

  logPrint debug "Task Add"

  if [ "${1}" ]; then
    thisTaskName="${@}" ; logPrint debug "${thisTaskName}"
  else
    logPrint error "Missing task name"
    exit 1
  fi

  if databaseTableCheckEntryExists task "|${thisTaskName}$" ; then
    logPrint error "Task already exists: '${thisTaskName}'"
    exit 1
  fi

  if databaseTableInsert task "[ ]" "`timestampGetNow`" "0" "${thisTaskName}" ; then
    logPrint info "New task created: '${thisTaskName}'"
  else
    logPrint error "Failed to create task: '${thisTaskName}'"
  fi

}

taskComplete() {

  if [ ! "${1}" ]; then
    logPrint error "Missing task name"
    exit 1
  fi

  thisTaskName="${@}"

  if ! databaseTableCheckEntryExists task "|${thisTaskName}$" ; then
    logPrint error "Task not found: '${thisTaskName}'"
    exit 1
  fi
  
  if ! databaseTableInsert completed "[X]" "`timestampGetNow`" "${thisTaskName}" ; then
    logPrint error "Failed to mark task as completed: '${thisTaskName}'"
    exit 1
  fi

  if ! databaseTableDeleteByString task "|${thisTaskName}$" ; then
    logPrint error "Failed to delete task after marking it as completed: '${thisTaskName}'"
    exit 1
  fi

  logPrint info "Yay! Another task completed: '${thisTaskName}'"

}


taskDelete() {

  if [ ! "${1}" ]; then
    logPrint error "Missing task name"
    exit 1
  fi

  thisTaskName="${@}"

  if ! databaseTableCheckEntryExists task "|${thisTaskName}$" ; then
    logPrint error "Task not found: '${thisTaskName}'"
    exit 1
  fi
  
  if databaseTableDeleteByString task "|${thisTaskName}$" ; then
    logPrint info "Task deleted: '${thisTaskName}'"
  else
    logPrint error "Failed to delete task: '${thisTaskName}'"
  fi

}

taskList() {

  logPrint debug "Task List"

  databaseTableList task 10 asc 1 4

}

taskShowUsage() {

  echo -e "${colorBold}Lowbit Planner - Task${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0` task${colorReset} ${colorUnderline}${colorLightRed}action${colorReset}${colorDim} [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Actions:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}add${colorReset} ${colorUnderline}task_name${colorReset}            ${colorDim}- Create a new task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}complete${colorReset} ${colorUnderline}task_name${colorReset}       ${colorDim}- Complete a task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}delete${colorReset} ${colorUnderline}task_name${colorReset}         ${colorDim}- Delete a task${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}list${colorReset}                     ${colorDim}- List tasks${colorReset}"
  echo
  exit 0

}

taskRouter() {

  if [ ! $1 ]; then
    taskShowUsage
  fi

  usrAction=$1

  case ${usrAction} in
    "add")
      logPrint debug "Action => ${usrAction}"
      shift
      taskAdd "${@}"
      ;;
    "complete")
      logPrint debug "Action => ${usrAction}"
      shift
      taskComplete "${@}"
      ;;
    "delete")
      logPrint debug "Action => ${usrAction}"
      shift
      taskDelete "${@}"
      ;;
    "list")
      logPrint debug "Action => ${usrAction}"
      shift
      taskList
      ;;
    "--help"|"-h"|"help")
      logPrint debug "Action => ${usrAction}"
      taskShowUsage
      ;;
    *)
      logPrint error "Unknown action '${usrAction}'"
      ;;
  esac

}

#############
# Timestamp #
#############

timestampGetNow() {
  date "+%Y-%m-%d %H:%M"
}

################################################################################

if [ $1 ]; then
  usrCommand=$1 ; shift ; logPrint debug "Command => ${usrCommand}"
else
  syntaxShow
fi

case ${usrCommand} in

  "add")
    databaseCheckIfExists
    inboxAdd "${@}"
    ;;
  "completed")
    databaseCheckIfExists
    completedList
    ;;
  # "habit")
  #   habitList
  #   ;;
  "decide")
    databaseCheckIfExists
    interactiveDecide
    ;;
  "event")
    databaseCheckIfExists
    eventRouter "${@}"
    ;;
  "inbox")
    databaseCheckIfExists
    inboxRouter "${@}"
    ;;
  "review")
    databaseCheckIfExists
    interactiveReview
    ;;
  "task")
    databaseCheckIfExists
    taskRouter "${@}"
    ;;
  "work")
    databaseCheckIfExists
    interactiveWork
    ;;
  "--help"|"-h"|"help")
    helpShow
    ;;
  "--link")
    systemLink
    ;;
  *)
    logPrint error "Unknown option '${usrCommand}'"
    ;;

esac