#!/usr/bin/env bash

#########
# Color #
#########

colorReset="\e[0m"
colorBold="\e[1m"
colorDim="\e[2m"
colorUnderline="\e[4m"
colorBlink="\e[5m"
colorRed="\e[31m"
colorGreen="\e[32m"
colorYellow="\e[33m"
colorBlue="\e[34m"
colorMagenta="\e[35m"
colorCyan="\e[36m"
colorLightGray="\e[37m"
colorDarkGray="\e[90m"
colorLightRed="\e[91m"
colorLightGreen="\e[92m"
colorLightYellow="\e[93m"
colorLightBlue="\e[94m"
colorLightMagenta="\e[95m"
colorLightCyan="\e[96m"

#############
# Completed #
#############

completedList() {
  echo -e "${colorBold}${colorUnderline}Miniplan - Completed:${colorReset} ${colorDarkGray}(10 last)${colorReset}" ; echo
  echo -e "$(tail -n 10 ${databaseCompleted})"
}

############
# Database #
############

databasePath="${HOME}/.lowbit-planner"
databaseTables="
  inbox
"

databaseCheckIfExists() {
  if [ -d "${databasePath}" ]; then
    logPrint debug "Database found at => ${databasePath}"
  else
    logPrint info "Database not found - Creating one at [${databasePath}]"
    databaseCreate
  fi
}

databaseCreate() {

  # Database (directory)
  mkdir -p "${databasePath}"    ; systemCheckReturnCode "Initializing database structure" "Error creating database structure"

  # Tables (files)
  for table in $databaseTables; do
    touch "${databasePath}/${table}.db" ; systemCheckReturnCode "Initializing table: ${table}" "Failed to initialize table '${table}'"
  done

}

databaseTableDeleteFirst() {

  logPrint debug "Database => Delete first"

  if [ ! "${1}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"

  sed -i .bkp '1d' "${databasePath}/${thisTable}.db"

}

databaseTableInsert() {

  logPrint debug "Database => Insert"

  if [ ! "${3}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisMode="${1}"   ; shift ; logPrint debug "Mode => ${thisMode}"
  thisKey="${1}"    ; shift ; logPrint debug "Key => ${thisKey}"

  # Checking if the key must be unique
  if [[ "${thisMode}" == "unique" ]] && [[ $(grep ":${thisKey}:" "${databasePath}/${thisTable}.db") ]]; then

    logPrint warn "'${thisKey}' already exists on ${thisTable}"

  else

    # Preparing the entry
    thisEntry=":${thisKey}:"

    # Appending additional/optional fields
    while [ "${1}" ]; do
      thisEntry="${thisEntry}${1}:"
      shift
    done

    # Adding entry to the table
    logPrint debug "Entry => ${thisEntry}"
    echo "${thisEntry}" >> "${databasePath}/${thisTable}.db"
    systemCheckReturnCode "'${thisKey}' added to ${thisTable}" "Failed to add ${thisKey} to ${thisTable}"

  fi

}

databaseTableSelect() {

  logPrint debug "Database => Select"

  if [ ! "${2}" ]; then
    logPrint error "Missing at least one of the required arguments"
    exit 1
  fi

  # Assigning the user args
  thisTable="${1}"  ; shift ; logPrint debug "Table => ${thisTable}"
  thisLimit="${1}"  ; shift ; logPrint debug "Limit => ${thisLimit}"
  thisPrefix="${1}" ; shift ; logPrint debug "Prefix => ${thisPrefix}"
  thisKey="${1}"    ; shift ; logPrint debug "Key => ${thisKey}"

  # Header
  echo -e "${colorBold}${colorUnderline}${colorLightGreen}${thisTable^}${colorReset}"
  echo

  # Looping through each entry
  IFS=$'\n'
  thisRow=1
  for entry in $(cat "${databasePath}/${thisTable}.db"); do

    if [ ! ${thisRow} -le ${thisLimit} ]; then
      break
    fi

    # Key
    echo -en "${colorBold}${thisPrefix}`echo "${entry}" | cut -d: -f${thisKey}`${colorReset}"

    # Additional/optional fields
    unset IFS
    for field in $1; do
      echo -n " `echo "${entry}" | cut -d: -f$1`"
    done

    # New line
    echo

    # Iterating this row number
    ((thisRow++))

  done

}

###########
# Do Mode #
###########

doCreateHabit() {

  echo "[H]:d::${thisItemName}" >> "${databaseHabits}"
  doDeleteItem

}

doCompleteItem() {

  echo "[X]:${thisItemName}" >> "${databaseCompleted}"
  doDeleteItem

}

doDeleteItem() {

  sed -i .bkp '1d' "${databaseItems}"

}

doDraw() {

  thisItemsCount=`itemCount`
  thisItem=`head -n1 ${databaseItems}`
  thisItemStatus=`echo ${thisItem} | cut -d: -f1`
  thisItemName=`echo ${thisItem} | cut -d: -f3-`

  clear

  echo -e "${colorBold}${colorUnderline}Miniplan${colorReset} (${colorBold}${colorLightRed}Do!${colorReset})"
  echo
  echo -e "${colorDim}Pending Items: ${colorReset}${colorBold}${colorLightGreen}${thisItemsCount}${colorReset}"
  echo
  echo -e "${colorDim}Next Item:${colorReset}"
  echo -e "${colorBold}${thisItemStatus}${colorReset} ${colorLightYellow}${thisItemName}${colorReset}"
  echo
  echo -e "${colorDim}Options:${colorReset} ${colorUnderline}c${colorReset}omplete ${colorDim}|${colorReset} ${colorUnderline}l${colorReset}ater ${colorDim}|${colorReset} ${colorUnderline}h${colorReset}abit ${colorDim}|${colorReset} ${colorUnderline}d${colorReset}elete ${colorDim}|${colorReset} ${colorUnderline}n${colorReset}ew ${colorDim}|${colorReset} ${colorUnderline}q${colorReset}uit"
  echo

}

doNewItem() {
  clear
  read -p "New item name => " usrNewItemName
  itemAdd "${usrNewItemName}"

}

doSkipItem() {

  echo "[>]:${thisItemPriority}:${thisItemName}" >> "${databaseItems}"
  doDeleteItem

}

doStart() {

  while [ "${usrChoice}" != "q" ]; do
    doDraw
    read -p "Choice => " usrChoice

    case "${usrChoice}" in
  
      "c"|"complete")
        doCompleteItem
        ;;
      "l"|"later")
        doSkipItem
        ;;
      "h"|"habit")
        doCreateHabit
        ;;
      "d"|"delete")
        doDeleteItem
        ;;
      "n"|"new")
        doNewItem
        ;;
      "q"|"quit")
        break
        ;;

    esac
  
  done

  logPrint info "Thank you for using Miniplan"

}

#########
# Habit #
#########

habitList() {
  echo -e "${colorBold}${colorUnderline}Miniplan - Habits:${colorReset}" ; echo
  cat ${databaseHabits}
}

########
# Help #
########

helpShow() {

  echo -e "${colorBold}${colorLightGreen}Item Status:${colorReset}"
  echo -e "  ${colorBold}[ ]${colorReset} ${colorDim}- New Item${colorReset}"
  echo -e "  ${colorBold}[>]${colorReset} ${colorDim}- Later${colorReset}"
  echo -e "  ${colorBold}[H]${colorReset} ${colorDim}- Habit${colorReset}"
  echo -e "  ${colorBold}[P]${colorReset} ${colorDim}- Part of a project${colorReset}"
  echo -e "  ${colorBold}[X]${colorReset} ${colorDim}- Done${colorReset}"

}

#########
# Inbox #
#########

inboxAdd() {

  logPrint debug "Inbox Add"

  if [ ! "${1}" ]; then
    logPrint error "Missing inbox item name"
    exit 1
  fi

  thisInboxItemName="${@}"

  databaseTableInsert inbox unique "${thisInboxItemName}"

}

inboxList() {

  logPrint debug "Inbox List"

  databaseTableSelect inbox 10 "- " 2

}

inboxShowUsage() {

  echo -e "${colorBold}Lowbit Planner - Inbox${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0` inbox${colorReset} ${colorUnderline}${colorLightRed}action${colorReset}${colorDim} [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Actions:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}add${colorReset} ${colorUnderline}item_name${colorReset}    ${colorDim}- Add an item to the inbox${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}delete${colorReset} ${colorUnderline}item_name${colorReset} ${colorDim}- Delete an item from the inbox${colorReset}"
  echo -e "  ${colorUnderline}${colorLightRed}list${colorReset}             ${colorDim}- List inbox items${colorReset}"
  echo
  exit 0

}

inboxParse() {

  logPrint debug "Inbox Parse"

  if [ ! $1 ]; then
    inboxShowUsage
  fi

  usrAction=$1

  case ${usrAction} in
    "add")
      logPrint debug "Action => ${usrAction}"
      shift
      inboxAdd "${@}"
      ;;
    "list")
      logPrint debug "Action => ${usrAction}"
      shift
      inboxList
      ;;
    "--help"|"-h"|"help")
      logPrint debug "Action => ${usrAction}"
      inboxShowUsage
      ;;
    *)
      logPrint error "Unknown action '${usrAction}'"
      ;;
  esac

}

##########
# System #
##########

systemCheckReturnCode() {

  thisRC=$?
  thisStringOK="${1}"
  thisStringError="${2}"

  if [ $thisRC -eq 0 ]; then
    logPrint info "${thisStringOK}"
  else
    logPrint error "${thisStringError}"
    exit 1
  fi

}

systemLink() {

  if [ -h /usr/local/bin/plan ]; then
    logPrint info "The symbolic link already exists"
  else
    logPrint info "Creating a symbolic link to this script"
    logPrint user "You will be prompted to your 'sudo' password"
    sudo ln -s `realpath $0` /usr/local/bin/plan  ; systemCheckReturnCode "Symbolic link created" "Failed to create symbolic link"
  fi

}

########
# Item #
########

itemAdd() {

  if [ "${1}" ]; then
    thisItemName="${@}"
  else
    logPrint error "You need to inform the item name"
    exit 1
  fi

  logPrint debug "Adding item => ${thisItemName}"

  echo "[ ]:0:${thisItemName}" >> "${databaseItems}"
  thisRC=$?

  if [ $thisRC -eq 0 ]; then
    logPrint info "Added item [${thisItemName}]"
  else
    logPrint error "Failed to add item [${thisItemName}] to the database"
    exit 1
  fi

}

itemCount() {

  cat "${databaseItems}" | wc -l | tr -d ' '

}

itemList() {
  echo -e "${colorBold}${colorUnderline}Miniplan - List:${colorReset} ${colorDarkGray}(10 first)${colorReset}" ; echo
  echo -e "$(head -n 10 ${databaseItems})"
}

#######
# Log #
#######

logPrint() {
  thisLogLevel="${1}"
  thisLogString="${2}"

  case $thisLogLevel in

    "debug")
      if [ $DEBUG == "true" ]; then
        echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorDarkGray}debug${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      fi
      ;;
    "error")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightRed}error${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "info")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightGreen}info ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "user")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorBlink}${colorLightMagenta}user ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;
    "warn")
      echo -e "${colorDarkGray}[`date +'%Y-%m-%d %H:%M:%S'`${colorDarkGray}] [${colorLightYellow}warn ${colorReset}${colorDarkGray}]${colorReset} ${thisLogString}"
      ;;

    *)
      echo "Error: Wrong log type"
      ;;

  esac

}

logTest() {
  logPrint debug "Test message"
  logPrint info "Test message"
  logPrint warn "Test message"
  logPrint error "Test message"
  logPrint user "Test message"
}

##########
# Syntax #
##########

syntaxShow() {

  echo -e "${colorBold}Lowbit Planner - Bash Edition${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Usage:${colorReset}"
  echo -e "  ${colorBold}`basename $0`${colorReset} ${colorUnderline}${colorLightMagenta}command${colorReset} ${colorDim}[${colorReset}${colorUnderline}${colorLightRed}action${colorReset}${colorDim}] [${colorReset}${colorUnderline}arguments${colorReset}${colorDim}]${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Quick commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}add${colorReset} ${colorUnderline}item_name${colorReset} ${colorDim}- Add an item to the inbox${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Basic commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}event${colorReset}         ${colorDim}- Event operations${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}habit${colorReset}         ${colorDim}- Habit operations${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}inbox${colorReset}         ${colorDim}- Inbox operations${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}task${colorReset}          ${colorDim}- Task operations${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}Interactive commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}decide${colorReset}        ${colorDim}- Start the 'Decision' mode${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}do${colorReset}            ${colorDim}- Start the 'Do' mode${colorReset}"
  echo
  echo -e "${colorBold}${colorLightGreen}System Commands:${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}--help${colorReset}        ${colorDim}- Display a help message${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}--install${colorReset}     ${colorDim}- Install this script${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}--link${colorReset}        ${colorDim}- Create a symbolic link to this script${colorReset}"
  echo -e "  ${colorUnderline}${colorLightMagenta}--version${colorReset}     ${colorDim}- Display the script version${colorReset}"
  echo
  exit 0

}

##########
# Script #
##########

if [ ! $1 ]; then
  syntaxShow
fi

usrCommand=$1

case ${usrCommand} in

  # "add")
  #   logPrint debug "Command => ${usrCommand}"
  #   databaseCheckIfExists
  #   shift
  #   itemAdd "${@}"
  #   ;;
  # "do")
  #   logPrint debug "Command => ${usrCommand}"
  #   databaseCheckIfExists
  #   doStart
  #   ;;
  # "habit")
  #   logPrint debug "Command => ${usrCommand}"
  #   habitList
  #   ;;
  "inbox")
    databaseCheckIfExists
    logPrint debug "Command => ${usrCommand}"
    shift ; inboxParse "${@}"
    ;;
  "--help"|"-h"|"help")
    logPrint debug "Command => ${usrCommand}"
    syntaxShow
    ;;
  "--link")
    logPrint debug "Command => ${usrCommand}"
    systemLink
    ;;
  *)
    logPrint error "Unknown option '${usrCommand}'"
    ;;

esac